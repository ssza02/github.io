<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>叉烧的诞生</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-19T16:02:19.841Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>heng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>主流浏览器图片反防盗链方法总结</title>
    <link href="http://yoursite.com/2018/10/19/%E4%B8%BB%E6%B5%81%E6%B5%8F%E8%A7%88%E5%99%A8%E5%9B%BE%E7%89%87%E5%8F%8D%E9%98%B2%E7%9B%97%E9%93%BE%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/10/19/主流浏览器图片反防盗链方法总结/</id>
    <published>2018-10-19T14:54:33.000Z</published>
    <updated>2018-10-19T16:02:19.841Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>还记得之前写的那个无聊的插件，前一段时间由于豆瓣读书增加了防盗链策略使得我们无法直接引用他们的图片，使得我这个小插件无法工作。本以为是一个很简单的问题，但是没想到这个小问题硬是让我改了五六遍才改好，可以说是非常的蠢了。总结一下自己犯傻的原因，还是由于自己懒得去深入研究，谷歌百度了问题就直接把方案拿来用了，浅尝辄止人云亦云，解决了表面的问题而没有深入的总结。当然，从另外一个方面讲，我也是初步领会到了前端程序员面对要兼容各种浏览器的需求时头有多大了。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>问题很简单，就是我希望在自己的页面里用<img src="xxxx">来引用其他网站的一张图片，但是他的网站设置了防盗链的策略，会在后台判断请求的Referrer属性是不是来自于一个非本域名的网站，如果来源不是本域名就返回403 forbidden。我的目的就是用最方便的方法使得我的页面能够不受他的防盗链策略的影响。</p><a id="more"></a><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="1、后台预下载"><a href="#1、后台预下载" class="headerlink" title="1、后台预下载"></a>1、后台预下载</h4><p>预下载是最直观的一种方法，既然不能直接引用，那我就先后台下载下来，然后将图片链接到下载后的图片即可。这个方法还是比较稳妥的，图片下载下来就是自己的了，不会再受人限制。不过这总有种侵犯知识产权的感觉，而且每张图片都要后台先下载，逻辑处理起来还是有点麻烦的；而且对于那种纯静态页面，没有后台程序供我们发挥，这也就无法实现了。</p><h4 id="2、第三方代理"><a href="#2、第三方代理" class="headerlink" title="2、第三方代理"></a>2、第三方代理</h4><p>第三方代理其实算是后台与下载的升级版，其实就是将下载图片的这个过程交给第三方的网站。一个非常好用的代理是images.weserv.nl，我们可以直接将自己需要“盗链”的图片写在请求中即可。我们甚至可以指定一些简单的图片处理参数，让代理帮我们处理。</p><p>比如我想盗链<a href="https://foo.com/foo.jpg，并且将图片宽度设置成100，我们就可以直接这样引用" target="_blank" rel="noopener">https://foo.com/foo.jpg，并且将图片宽度设置成100，我们就可以直接这样引用</a>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;https://images.weserv.nl/?url=foo.com/foo.jpg&amp;w=100&quot; /&gt;</span><br></pre></td></tr></table></figure><p>这还是很方便的，不过美中不足的是这个国外的网站在国内的访问速度似乎有点慢，有时候甚至还会被墙，这就有点尴尬了。</p><h3 id="3、删除Header中的Referrer"><a href="#3、删除Header中的Referrer" class="headerlink" title="3、删除Header中的Referrer"></a>3、删除Header中的Referrer</h3><p>相比上面两种折腾的方法，如果能直接修改Referrer，那不就省了很多事了么。但是事实上这里的配置还是有挺多坑的，方法也有很多种，一不小心就会跟我一样踩了一遍又一遍。</p><h4 id="添加meta标签"><a href="#添加meta标签" class="headerlink" title="添加meta标签"></a>添加meta标签</h4><p>一种方法是给页面添加一个meta标签，在meta标签里指定referrer的值，比如。网上可以查到各种奇奇怪怪的值，其实我总结了来源于两个地方。</p><p>一个是来自whatwg的标准。他给meta标签的referrer属性定义了四个值：never,always,origin,default。如果需要关闭referrer，就将referrer的值设置成”never”。这个标准还是比较老的，而且在他的主页上也明确写了”This document is obsolete.”。不过据我调研，或许正是由于这个标准比较老，反而导致绝大多数浏览器对他的支持都很好，因祸得福蛤蛤。</p><p>另外一个是来自MDN的标准。他给meta标签的referrer属性定义了五个值，如果要关闭referrer，就将它的值设置成no-referrer。</p><p>不过我们需要注意的是，meta标签添加的位置也很重要，有的浏览器能够识别非head标签中的meta标签，有的就不行。在实际使用的时候还要小心，这一点下文会有一个更具体的比较。</p><h4 id="添加ReferrerPolicy属性"><a href="#添加ReferrerPolicy属性" class="headerlink" title="添加ReferrerPolicy属性"></a>添加ReferrerPolicy属性</h4><p>添加meta标签相当于对文档中的所有链接都取消了referrer，而ReferrerPolicy则更精确的指定了某一个资源的referrer策略。关于这个策略的定义可以参照MDN。比如我想只对某一个图片取消referrer，如下编写即可:</p><p><img src="xxxx.jpg" referrerpolicy="no-referrer"></p><h4 id="浏览器支持对比"><a href="#浏览器支持对比" class="headerlink" title="浏览器支持对比"></a>浏览器支持对比</h4><p>上面我们讲了两种取消referrer头信息的方法，但其实这却对应了五种写法，我们来看下面的对比表：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/zPh0erYjkib3TP27ePgs0meKibbze8COeSfpfEo0ibjy19p0aesS1FJn4XOz20PJv6Q1rPhZBNicMLxUqFG01t1bxw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="image"></p><p>可以看出Chrome浏览器对各种写法都支持的最好，棒棒哒；Firefox支持所有标准的写法，但是不支持没有写在head标签中的meta标签；Edge/IE则不支持MDN里定义的”no-referrer”配置项，果然是个古董。。。</p><p>总的来说，保证最佳效果的最简单的写法就是添加一个meta标签，这样就不用考虑浏览器的差别了，虽然这种写法并不被官方推荐(主要还是要迁就IE这个古董，放弃了理论上更为正确的标准)。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;还记得之前写的那个无聊的插件，前一段时间由于豆瓣读书增加了防盗链策略使得我们无法直接引用他们的图片，使得我这个小插件无法工作。本以为是一个很简单的问题，但是没想到这个小问题硬是让我改了五六遍才改好，可以说是非常的蠢了。总结一下自己犯傻的原因，还是由于自己懒得去深入研究，谷歌百度了问题就直接把方案拿来用了，浅尝辄止人云亦云，解决了表面的问题而没有深入的总结。当然，从另外一个方面讲，我也是初步领会到了前端程序员面对要兼容各种浏览器的需求时头有多大了。&lt;/p&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;问题很简单，就是我希望在自己的页面里用&lt;img src=&quot;xxxx&quot;&gt;来引用其他网站的一张图片，但是他的网站设置了防盗链的策略，会在后台判断请求的Referrer属性是不是来自于一个非本域名的网站，如果来源不是本域名就返回403 forbidden。我的目的就是用最方便的方法使得我的页面能够不受他的防盗链策略的影响。&lt;/p&gt;
    
    </summary>
    
      <category term="前端安全" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="前端安全" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>module替代scopet</title>
    <link href="http://yoursite.com/2018/10/11/module%E6%9B%BF%E4%BB%A3scopet/"/>
    <id>http://yoursite.com/2018/10/11/module替代scopet/</id>
    <published>2018-10-11T12:27:49.000Z</published>
    <updated>2018-10-11T12:30:05.320Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于CSS-Module"><a href="#关于CSS-Module" class="headerlink" title="关于CSS Module"></a>关于CSS Module</h3><p>css modules是一种流行的模块化和组合CSS的系统。 vue-loader提供了与css modules的集成，作为scope CSS的替代方案。<br>vue引入scopet，有缺陷的样式私有化</p><p>最开始的时候，我们提倡并大量使用的是scoped这种技术<br>在vue组件中，为了使样式私有化（模块化），不对全局造成污染，可以在style标签上添加scoped属性，以表示它的只属于当下的模块，这是一个非常好的举措。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@media (min-width: 250px) &#123;</span><br><span class="line">.list-container:hover &#123;</span><br><span class="line">background: orange;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个可选 scoped 属性会自动添加一个唯一的属性 (比如 data-v-21e5b78) 为组件内 CSS 指定作用域<br>编译的时候 .list-container:hover 会被编译成类似 .list-container[data-v-21e5b78]:hover</p><p>但是，它并不能完全避免冲突<br>如果用户在不同的父子级，定义了一个重复的类名，会影响到所有定义为errShow类名的组件的显示<br>并且它会造成一种后果，每个样式的权重加重了：<br>理论上我们要去修改这个样式，需要更高的权重去覆盖这个样式。<br>这是增加复杂度的其中一个维度。</p><p>CSS modules则做的更好，它不是添加属性，而是直接改变类名</p><p>SS Modules既不是官方标准，也不是浏览器的特性，而是在构建步骤中对CSS类名选择器限定作用域的一种方式（通过hash实现类似于命名空间的方法）。</p><p>类名是动态生成的，唯一的，并准确对应到源文件中的各个类的样式。<br>实际上，CSS Modules只是CSS模块化的一种方式。为什么我们需要CSS模块化呢？</p><p>CSS的规则都是全局的，任何一个组件的样式规则，都对整个页面有效。于是，亟待解决的就是样式冲突（污染）的问题。一般地，为了解决冲突，会把class命名写长一点，降低冲突几率；加上父元素的选择器，来限制范围等……</p><h3 id="CSS模块化就是来解决这个问题的，一般地，分为三类"><a href="#CSS模块化就是来解决这个问题的，一般地，分为三类" class="headerlink" title="CSS模块化就是来解决这个问题的，一般地，分为三类"></a>CSS模块化就是来解决这个问题的，一般地，分为三类</h3><ol><li>　　命名约定类</li></ol><p>　　该类CSS模块化方案主要用来规范CSS命名，最常见的是BEM，当然还有OOCSS等，在构建工具出现之前，大多数都是在CSS命名上做文章</p><ol start="2"><li>　　CSS in JS</li></ol><p>　　彻底抛弃CSS，用javascript来写CSS规则，常见的有styled-components</p><ol start="3"><li>　　使用JS来管理样式</li></ol><p>　　使用JS编译原生的CSS文件，使其具备模块化的能力，最常见的就是CSS Modules</p><p>　　随着构建工具的兴起，越来越多的人开始使用后两者方案，书写CSS时，不用再特意地关心样式冲突问题。只需要使用约定的格式编写代码即可　　</p><h3 id="VUE的CSS-Module写法"><a href="#VUE的CSS-Module写法" class="headerlink" title="VUE的CSS Module写法"></a>VUE的CSS Module写法</h3><ul><li>使用时需要进行添加v-bind，如样式绑定简写 :class<br>-<br>① 在style标签中添加module属性，表示打开CSS-loader的模块模式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style module&gt;</span><br><span class="line">.red &#123;color: red;&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>② 在模板中使用动态类绑定 :class ，并在类名前面加上 $style.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p :class=&quot;$style.red&quot;&gt;</span><br><span class="line">    This should be red</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>③ 如果类名包含中划线，则使用中括号语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h4 :class=&quot;$style[&apos;header-tit&apos;]&quot;&gt;类别推荐&lt;/h4&gt;</span><br></pre></td></tr></table></figure><p>④ 也可以使用数组或对象语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;p :class=&quot;&#123; [$style.red]: isRed &#125;&quot;&gt;</span><br><span class="line">      Am I red?</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;p :class=&quot;[$style.red, $style.bold]&quot;&gt;</span><br><span class="line">      Red and bold</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>　　<br>⑤ 更复杂的对象语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul</span><br><span class="line">　　　 :class=&quot;&#123;</span><br><span class="line">    [$style.panelBox]:true,</span><br><span class="line">    [$style.transitionByPanelBox]:needTransition</span><br><span class="line">  &#125;&quot;</span><br></pre></td></tr></table></figure><p>⑥ 更复杂的数组语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;li</span><br><span class="line">      :class=&quot;[</span><br><span class="line">        $style[&apos;aside-item&apos;],</span><br><span class="line">        &#123;[$style[&apos;aside-item_active&apos;]]:(i === index)&#125;</span><br><span class="line">      ]&quot;</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><blockquote><p>css-loader关于CSS modules的默认配置如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  modules: true,</span><br><span class="line">  importLoaders: 1,</span><br><span class="line">  localIdentName: &apos;[hash:base64]&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以使用vue-loader的cssModules选项为css-loader进行自定义的配置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: &apos;\.vue$&apos;,</span><br><span class="line">      loader: &apos;vue-loader&apos;,</span><br><span class="line">      options: &#123;</span><br><span class="line">        cssModules: &#123;</span><br><span class="line">          localIdentName: &apos;[path][name]---[local]---[hash:base64:5]&apos;,</span><br><span class="line">          camelCase: true</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;关于CSS-Module&quot;&gt;&lt;a href=&quot;#关于CSS-Module&quot; class=&quot;headerlink&quot; title=&quot;关于CSS Module&quot;&gt;&lt;/a&gt;关于CSS Module&lt;/h3&gt;&lt;p&gt;css modules是一种流行的模块化和组合CSS的系统。 vue-loader提供了与css modules的集成，作为scope CSS的替代方案。&lt;br&gt;vue引入scopet，有缺陷的样式私有化&lt;/p&gt;
&lt;p&gt;最开始的时候，我们提倡并大量使用的是scoped这种技术&lt;br&gt;在vue组件中，为了使样式私有化（模块化），不对全局造成污染，可以在style标签上添加scoped属性，以表示它的只属于当下的模块，这是一个非常好的举措。&lt;/p&gt;
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
      <category term="css" scheme="http://yoursite.com/categories/vue/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>documentFragment对象</title>
    <link href="http://yoursite.com/2018/10/10/documentFragment%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2018/10/10/documentFragment对象/</id>
    <published>2018-10-10T12:51:05.000Z</published>
    <updated>2018-10-10T12:51:37.562Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一般动态创建html元素都是创建好了直接appendChild()上去，但是如果要添加大量的元素还用这个方法的话就会导致大量的重绘以及回流，所以需要一个’缓存区’来保存创建的节点，然后再一次性添加到父节点中。这时候DocumentFragment对象就派上用场了。</p></blockquote><h3 id="看下w3c的官方说明："><a href="#看下w3c的官方说明：" class="headerlink" title="看下w3c的官方说明："></a>看下w3c的官方说明：</h3><p>DocumentFragment 节点不属于文档树，继承的 parentNode 属性总是 null。</p><p>不过它有一种特殊的行为，该行为使得它非常有用，即当请求把一个 DocumentFragment 节点插入文档树时，插入的不是 DocumentFragment 自身，而是它的所有子孙节点。这使得 DocumentFragment 成了有用的占位符，暂时存放那些一次插入文档的节点。它还有利于实现文档的剪切、复制和粘贴操作。</p><p>重点就在于DocumentFragment 节点不属于文档树。因此当把创建的节点添加到该对象时，并不会导致页面的回流，因此性能就自然上去了。</p><h3 id="创建该对象也简单："><a href="#创建该对象也简单：" class="headerlink" title="创建该对象也简单："></a>创建该对象也简单：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var fragment = document.createDocumentFragment();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">看下实例：</span><br><span class="line"></span><br><span class="line">复制代码</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var pNode,fragment = document.createDocumentFragment();</span><br><span class="line"></span><br><span class="line">    for(var i=0; i&lt;20; i++)&#123;</span><br><span class="line">        pNode = document.createElement(&apos;p&apos;);</span><br><span class="line">        pNode.innerHTML = i;</span><br><span class="line">        fragment.appendChild(pNode);</span><br><span class="line">    &#125;</span><br><span class="line">    document.body.appendChild(fragment);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;一般动态创建html元素都是创建好了直接appendChild()上去，但是如果要添加大量的元素还用这个方法的话就会导致大量的重绘以及回流，所以需要一个’缓存区’来保存创建的节点，然后再一次性添加到父节点中。这时候DocumentFragment对
      
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>在vue中使用SockJS实现webSocket长连接通信的过程</title>
    <link href="http://yoursite.com/2018/10/09/%E5%9C%A8vue%E4%B8%AD%E4%BD%BF%E7%94%A8SockJS%E5%AE%9E%E7%8E%B0webSocket%E9%95%BF%E8%BF%9E%E6%8E%A5%E9%80%9A%E4%BF%A1%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/10/09/在vue中使用SockJS实现webSocket长连接通信的过程/</id>
    <published>2018-10-09T12:46:03.000Z</published>
    <updated>2018-10-09T12:47:51.992Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近一个业务需求，需要和服务器端建立webSocket连接,从而实现消息的实时推送</p></blockquote><h3 id="socksjs"><a href="#socksjs" class="headerlink" title="socksjs"></a>socksjs</h3><ol><li>客户端和服务器端api尽可能简洁，尽量靠近websocket api</li><li>支持服务端扩展和负载均衡技术</li><li>传输层应该全面支持跨域通信</li><li>如果受到代理服务器的限制，传输层能优雅地从一种方式回退到另一种方式</li><li>尽可能快地建立连接</li><li>客户端只是纯粹的JavaScript，不需要flash</li><li>客户端JavaScript必须经过严格的测试</li><li>服务器端代码尽可能简单，降低用另一种语言重写server的代价</li></ol><a id="more"></a><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><blockquote><p>要进行文章中的代码的测试,需要服务端端开发人员配合你,提供相关的通信接口.来完成客户端和服务端的通信.实现通信,我们需要用到另个模块 sockjs-client 模块和 stomjs 模块,接下来我会先对这两个模块做一个简单的介绍.</p></blockquote><h3 id="关于实时通信"><a href="#关于实时通信" class="headerlink" title="关于实时通信"></a>关于实时通信</h3><ol><li>ajax轮询 ajax轮询的原理非常简单,让浏览器每隔几秒就像服务器发送一个请求,询问服务器是否有新的信息.</li><li>http 长轮询 长轮询的机制和ajax轮询差不多,都是采用轮询的方式,不过才去的是阻塞模型(一直打电话,没收到就不挂电话),也就是说,客户端发起链接后,如果没有消息,就一直不返回response给客户端.知道有新的消息才返回,返回完之后,客户端再此建立连接,周而复始.</li><li>WebSocket WebSocket是HTML5开始提供的一种在单个TCP连接上进行全双工通讯的协议.在WebSocket API中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送,不需要繁琐的询问和等待. 从上面的介绍很容易看出来,ajax轮询和长轮询都是非常耗费资源的,ajax轮询需要服务器有很快的处理速度和资源,http长轮询需要有很高的并发,也就是同时接待客户的能力.而WebSocket,只需要经过一次HTTP请求,就可以与服务端进行源源不断的消息收发了.</li></ol><h3 id="sockjs-client"><a href="#sockjs-client" class="headerlink" title="sockjs-client"></a>sockjs-client</h3><p>sockjs-client 是从SockJS中分离出来的用于客户端使用的通信模块.所以我们就直接来看看SockJS. SockJS是一个浏览器的JavaScript库,它提供了一个类似于网络的对象,SockJS提供了一个连贯的,跨浏览器的JavaScriptAPI,它在浏览器和Web服务器之间创建了一个低延迟,全双工,跨域通信通道. 你可能会问,我为什么不直接用原生的WebSocket而要使用SockJS呢?这得益于SockJS的一大特性,一些浏览器中缺少对WebSocket的支持,因此，回退选项是必要的，而Spring框架提供了基于SockJS协议的透明的回退选项。SockJS提供了浏览器兼容性,优先使用原生的WebSocket,如果某个浏览器不支持WebSocket,SockJS会自动降级为轮询.</p><h3 id="stomjs"><a href="#stomjs" class="headerlink" title="stomjs"></a>stomjs</h3><p>STOMP(Simple Text-Orientated Messaging Protocol) 面向消息的简单文本协议; WebSocket是一个消息架构,不强制使用任何特定的消息协议,它依赖于应用层解释消息的含义. 与HTTP不同,WebSocket是处在TCP上非常薄的一层,会将字节流转化为文本/二进制消息,因此,对于实际应用来说,WebSocket的通信形式层级过低,因此，可以在 WebSocket 之上使用STOMP协议，来为浏览器 和 server间的 通信增加适当的消息语义。</p><h3 id="STOMP与WebSocket-的关系"><a href="#STOMP与WebSocket-的关系" class="headerlink" title="STOMP与WebSocket 的关系:"></a>STOMP与WebSocket 的关系:</h3><ul><li>HTTP协议解决了web浏览器发起请求以及web服务器响应请求的细节,假设HTTP协议不存在,只能使用TCP套接字来编写web应用,你可能认为这是一件疯狂的事情;</li><li>直接使用WebSocket(SockJS)就很类似于使用TCP套接字来编写web应用,因为没有高层协议,就需要我们定义应用间发送消息的语义,还需要确保连接的两端都能遵循这些语义;</li><li>同HTTP在TCP套接字上添加请求-响应模型层一样,STOMP在WebSocket之上提供了一个基于帧的线路格式层,用来定义消息语义.<br>-</li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><blockquote><p>代码中除了最基本的连接,还设置了一个定时器,每隔十秒发送一条数据到服务器端,如果发生错误,catch这个错误,重新建立连接.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">// 安装并引入相关模块</span><br><span class="line">import SockJS from &apos;sockjs-client&apos;;</span><br><span class="line">import Stomp from &apos;stompjs&apos;;</span><br><span class="line">export default &#123;</span><br><span class="line"> data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">  dataList: []</span><br><span class="line">  &#125;;</span><br><span class="line"> &#125;,</span><br><span class="line"> mounted:function()&#123;</span><br><span class="line">  this.initWebSocket();</span><br><span class="line"> &#125;,</span><br><span class="line"> beforeDestroy: function () &#123;</span><br><span class="line">  // 页面离开时断开连接,清除定时器</span><br><span class="line">  this.disconnect();</span><br><span class="line">  clearInterval(this.timer);</span><br><span class="line"> &#125;,</span><br><span class="line"> methods: &#123;</span><br><span class="line">  initWebSocket() &#123;</span><br><span class="line">  this.connection();</span><br><span class="line">  let self = this;</span><br><span class="line">  // 断开重连机制,尝试发送消息,捕获异常发生时重连</span><br><span class="line">  this.timer = setInterval(() =&gt; &#123;</span><br><span class="line">   try &#123;</span><br><span class="line">   self.stompClient.send(&quot;test&quot;);</span><br><span class="line">   &#125; catch (err) &#123;</span><br><span class="line">   console.log(&quot;断线了: &quot; + err);</span><br><span class="line">   self.connection();</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;, 5000);</span><br><span class="line">  &#125;,</span><br><span class="line">  removeTab(targetName) &#123;</span><br><span class="line">  console.log(targetName)</span><br><span class="line">  &#125;,</span><br><span class="line">  connection() &#123;</span><br><span class="line">  // 建立连接对象</span><br><span class="line">  this.socket = new SockJS(&apos;http://xxxxxx:8089/ws&apos;);//连接服务端提供的通信接口，连接以后才可以订阅广播消息和个人消息</span><br><span class="line">  // 获取STOMP子协议的客户端对象</span><br><span class="line">  this.stompClient = Stomp.over(this.socket);</span><br><span class="line">  // 定义客户端的认证信息,按需求配置</span><br><span class="line">  var headers = &#123;</span><br><span class="line">   login: &apos;mylogin&apos;,</span><br><span class="line">   passcode: &apos;mypasscode&apos;,</span><br><span class="line">   // additional header</span><br><span class="line">   &apos;client-id&apos;: &apos;my-client-id&apos;</span><br><span class="line">  &#125;;</span><br><span class="line">  // 向服务器发起websocket连接</span><br><span class="line">  this.stompClient.connect(headers,(frame) =&gt; &#123;</span><br><span class="line">   this.stompClient.subscribe(&apos;/topic/chat_msg&apos;, (msg) =&gt; &#123; // 订阅服务端提供的某个topic</span><br><span class="line">   consolel.log(msg.body); // msg.body存放的是服务端发送给我们的信息</span><br><span class="line">   &#125;);</span><br><span class="line">  &#125;, (err) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  disconnect() &#123;</span><br><span class="line">  if (this.stompClient != null) &#123;</span><br><span class="line">   this.stompClient.disconnect();</span><br><span class="line">   console.log(&quot;Disconnected&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>websocket的实现有很多种，不过这个插件相对兼容性大些。<br>以上就是vue中使用SockJS实现webSocket通信的过程，希望对大家有帮助。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近一个业务需求，需要和服务器端建立webSocket连接,从而实现消息的实时推送&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;socksjs&quot;&gt;&lt;a href=&quot;#socksjs&quot; class=&quot;headerlink&quot; title=&quot;socksjs&quot;&gt;&lt;/a&gt;socksjs&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;客户端和服务器端api尽可能简洁，尽量靠近websocket api&lt;/li&gt;
&lt;li&gt;支持服务端扩展和负载均衡技术&lt;/li&gt;
&lt;li&gt;传输层应该全面支持跨域通信&lt;/li&gt;
&lt;li&gt;如果受到代理服务器的限制，传输层能优雅地从一种方式回退到另一种方式&lt;/li&gt;
&lt;li&gt;尽可能快地建立连接&lt;/li&gt;
&lt;li&gt;客户端只是纯粹的JavaScript，不需要flash&lt;/li&gt;
&lt;li&gt;客户端JavaScript必须经过严格的测试&lt;/li&gt;
&lt;li&gt;服务器端代码尽可能简单，降低用另一种语言重写server的代价&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="websocket" scheme="http://yoursite.com/categories/websocket/"/>
    
    
      <category term="websocket" scheme="http://yoursite.com/tags/websocket/"/>
    
      <category term="sockJs" scheme="http://yoursite.com/tags/sockJs/"/>
    
  </entry>
  
  <entry>
    <title>vue中slot的使用</title>
    <link href="http://yoursite.com/2018/10/08/vue%E4%B8%ADslot%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/10/08/vue中slot的使用/</id>
    <published>2018-10-08T12:14:44.000Z</published>
    <updated>2018-10-08T12:27:22.556Z</updated>
    
    <content type="html"><![CDATA[<h2 id="将父组件的内容放到子组件指定的位置叫做内容分发"><a href="#将父组件的内容放到子组件指定的位置叫做内容分发" class="headerlink" title="将父组件的内容放到子组件指定的位置叫做内容分发"></a>将父组件的内容放到子组件指定的位置叫做内容分发</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//在父组件里使用子组件</span><br><span class="line">&lt;son-tmp&gt;</span><br><span class="line">    &lt;div&gt;我是文字，我需要放到son-tmp组件里面制定的位置&lt;/div&gt;</span><br><span class="line">&lt;/son-tmp&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="单个插槽"><a href="#单个插槽" class="headerlink" title="单个插槽"></a>单个插槽</h2><blockquote><p>父组件app.vue</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;test-slot&gt;</span><br><span class="line">      &lt;span&gt;我是父组件里的文字，但是我要被放到子组件里&lt;/span&gt;</span><br><span class="line">    &lt;/test-slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import testSlot from &apos;./components/testSlot&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components:&#123;</span><br><span class="line">    testSlot</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>子组件testSlot.vue</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3&gt;test-slot&lt;/h3&gt;</span><br><span class="line">    //父组件里的span会替换掉slot所以这里的123是看不见的</span><br><span class="line">    //如果父组件在使用子组件testSlot的时候不在里面加内容则这里的slot会显示出来</span><br><span class="line">    &lt;slot&gt;123&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>效果图：</p></blockquote><p><img src="https://static.xmt.cn/14cfaef1252d43368f01094d2d1bc789.png" alt="image"></p><h2 id="多个插槽也叫具名插槽"><a href="#多个插槽也叫具名插槽" class="headerlink" title="多个插槽也叫具名插槽"></a>多个插槽也叫具名插槽</h2><blockquote><p>具名插槽就是将某个名字的内容插到子组件对应名字里面去<br>父组件app.vue</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    //使用子组件testSlot</span><br><span class="line">    &lt;test-slot&gt;</span><br><span class="line">      //slot=one这个div会替换掉子组件里name=&quot;one&quot;的slot标签</span><br><span class="line">      &lt;div slot=&quot;one&quot;&gt;</span><br><span class="line">        &lt;span&gt;one&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;第一个&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      //这个div没有用slot指定名字所以会替换掉子组件里没有name属性的slot标签</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;span&gt;此div没有slot&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      //slot=two这个div会替换掉子组件里name=&quot;two&quot;的slot标签</span><br><span class="line">      &lt;div slot=&quot;two&quot;&gt;</span><br><span class="line">        &lt;span&gt;two&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;第二个&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/test-slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import testSlot from &apos;./components/testSlot&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components:&#123;</span><br><span class="line">    testSlot</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="子组件testSlot-vue"><a href="#子组件testSlot-vue" class="headerlink" title="子组件testSlot.vue"></a>子组件testSlot.vue</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;testSlot&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;noneSlot&quot;&gt;</span><br><span class="line">      &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;test-two&quot;&gt;</span><br><span class="line">      &lt;slot name=&quot;two&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;test-one&quot;&gt;</span><br><span class="line">      &lt;slot name=&quot;one&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="https://static.xmt.cn/5e3cad7478124bee9e02cd111745b9ff.png" alt="image"></p><h2 id="作用域插槽（将子组件的值传到父组件供使用）"><a href="#作用域插槽（将子组件的值传到父组件供使用）" class="headerlink" title="作用域插槽（将子组件的值传到父组件供使用）"></a>作用域插槽（将子组件的值传到父组件供使用）</h2><blockquote><p>父组件app.vue</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h2&gt;app&lt;/h2&gt;</span><br><span class="line">     &lt;test-slot :items=&quot;items&quot;&gt;</span><br><span class="line">       &lt;template slot-scope=&quot;props&quot;&gt;</span><br><span class="line">         &lt;span&gt;&#123;&#123; props.addr &#125;&#125;&lt;/span&gt;</span><br><span class="line">         &lt;span&gt;&#123;&#123; props.cname &#125;&#125;&lt;/span&gt;</span><br><span class="line">         &lt;span&gt;&#123;&#123; props.age &#125;&#125;&lt;/span&gt;</span><br><span class="line">       &lt;/template&gt;</span><br><span class="line">     &lt;/test-slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import testSlot from &apos;./components/testSlot.vue&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  data ()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      items:[</span><br><span class="line">        &#123; text:&apos;文字1&apos; , cname:&apos;tom&apos; , addr:&apos;usa&apos; &#125;,</span><br><span class="line">        &#123; text:&apos;文字2&apos; , cname:&apos;wangwu&apos; , addr:&apos;uk&apos; &#125;,</span><br><span class="line">        &#123; text:&apos;文字3&apos; , cname:&apos;zhangsan&apos; , addr:&apos;un&apos; &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  components:&#123;</span><br><span class="line">    testSlot</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>子组件testSlot.vue</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;hello&quot;&gt;</span><br><span class="line">    &lt;slot :cname=&quot;items[2].cname&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;slot :addr=&quot;items[2].addr&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;slot age=&quot;18&quot;&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      num:100</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  props:[&apos;items&apos;],</span><br><span class="line">  methods:&#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  created()&#123;</span><br><span class="line">    console.log(&apos;items&apos;,this.$props.items);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>效果图：</p></blockquote><p><img src="https://static.xmt.cn/6af092a6cff2451a833df5bb5874e782.png" alt="image"></p><h2 id="如何理解Vue的作用域插槽"><a href="#如何理解Vue的作用域插槽" class="headerlink" title="如何理解Vue的作用域插槽"></a>如何理解Vue的作用域插槽</h2><blockquote><p>举个例子，比如我写了一个可以实现条纹相间的列表组件，发布后，使用者可以自定义每一行的内容或样式（普通的slot就可以完成这个工作）。而作用域插槽的关键之处就在于，父组件能接收来自子组件的slot传递过来的参数，具体看案例和注释。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">    &lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;Vue作用域插槽&lt;/title&gt;</span><br><span class="line">        &lt;script src=&quot;https://cdn.bootcss.com/vue/2.3.4/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app2&quot;&gt;</span><br><span class="line">            &lt;!-- 组件使用者只需传递users数据即可 --&gt;</span><br><span class="line">            &lt;my-stripe-list :items=&quot;users&quot; odd-bgcolor=&quot;#D3DCE6&quot; even-bgcolor=&quot;#E5E9F2&quot;&gt;</span><br><span class="line">                &lt;!-- props对象接收来自子组件slot的$index参数 --&gt;</span><br><span class="line">                &lt;template slot=&quot;cont&quot; scope=&quot;props&quot;&gt;</span><br><span class="line">                    &lt;span&gt;&#123;&#123;users[props.$index].id&#125;&#125;&lt;/span&gt;</span><br><span class="line">                    &lt;span&gt;&#123;&#123;users[props.$index].name&#125;&#125;&lt;/span&gt;</span><br><span class="line">                    &lt;span&gt;&#123;&#123;users[props.$index].age&#125;&#125;&lt;/span&gt;</span><br><span class="line">                    &lt;!-- 这里可以自定[编辑][删除]按钮的链接和样式 --&gt;</span><br><span class="line">                    &lt;a :href=&quot;&apos;#edit/id/&apos;+users[props.$index].id&quot;&gt;编辑&lt;/a&gt;</span><br><span class="line">                    &lt;a :href=&quot;&apos;#del/id/&apos;+users[props.$index].id&quot;&gt;删除&lt;/a&gt;</span><br><span class="line">                &lt;/template&gt;</span><br><span class="line">            &lt;/my-stripe-list&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            Vue.component(&apos;my-stripe-list&apos;, &#123;</span><br><span class="line">                /*slot的$index可以传递到父组件中*/</span><br><span class="line">                template: `</span><br><span class="line">                    &lt;div&gt;</span><br><span class="line">                        &lt;div v-for=&quot;(item, index) in items&quot; style=&quot;line-height:2.2;&quot; :style=&quot;index % 2 === 0 ? &apos;background:&apos;+oddBgcolor : &apos;background:&apos;+evenBgcolor&quot;&gt;</span><br><span class="line">                            &lt;slot name=&quot;cont&quot; :$index=&quot;index&quot;&gt;&lt;/slot&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                `,</span><br><span class="line">                props: &#123;</span><br><span class="line">                    items: Array,</span><br><span class="line">                    oddBgcolor: String,</span><br><span class="line">                    evenBgcolor: String</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            new Vue(&#123;</span><br><span class="line">                el: &apos;#app2&apos;,</span><br><span class="line">                data: &#123;</span><br><span class="line">                    users: [</span><br><span class="line">                        &#123;id: 1, name: &apos;张三&apos;, age: 20&#125;,</span><br><span class="line">                        &#123;id: 2, name: &apos;李四&apos;, age: 22&#125;,</span><br><span class="line">                        &#123;id: 3, name: &apos;王五&apos;, age: 27&#125;,</span><br><span class="line">                        &#123;id: 4, name: &apos;张龙&apos;, age: 27&#125;,</span><br><span class="line">                        &#123;id: 5, name: &apos;赵虎&apos;, age: 27&#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/309/402/309402928-59980dbd22053" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;将父组件的内容放到子组件指定的位置叫做内容分发&quot;&gt;&lt;a href=&quot;#将父组件的内容放到子组件指定的位置叫做内容分发&quot; class=&quot;headerlink&quot; title=&quot;将父组件的内容放到子组件指定的位置叫做内容分发&quot;&gt;&lt;/a&gt;将父组件的内容放到子组件指定的位置叫做内容分发&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//在父组件里使用子组件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;son-tmp&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div&amp;gt;我是文字，我需要放到son-tmp组件里面制定的位置&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/son-tmp&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>css编码规范</title>
    <link href="http://yoursite.com/2018/10/07/css%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2018/10/07/css编码规范/</id>
    <published>2018-10-07T15:31:31.000Z</published>
    <updated>2018-10-07T15:40:56.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="页面结构"><a href="#页面结构" class="headerlink" title="页面结构"></a>页面结构</h2><ul><li>容器: container</li><li>页头：header</li><li>内容：content/container</li><li>页面主体：main</li><li>页尾：footer</li><li>导航：nav</li><li>侧栏：sidebar</li><li>栏目：column</li><li>页面外围控制整体布局宽度：wrapper</li><li>左右中：left right center</li></ul><h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><ul><li>导航：nav</li><li>主导航：mainbav</li><li>子导航：subnav</li><li>顶导航：topnav</li><li>边导航：sidebar</li><li>左导航：leftsidebar</li><li>右导航：rightsidebar</li><li>菜单：menu</li><li>子菜单：submenu</li><li>标题: title</li><li>摘要: summary</li></ul><a id="more"></a><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li>标志：logo</li><li>广告：banner</li><li>登陆：login</li><li>登录条：loginbar</li><li>注册：regsiter</li><li>搜索：search</li><li>功能区：shop</li><li>标题：title</li><li>加入：joinus</li><li>状态：status</li><li>按钮：btn</li><li>滚动：scroll</li><li>标签页：tab</li><li>文章列表：list</li><li>提示信息：msg</li><li>当前的: current</li><li>小技巧：tips</li><li>图标: icon</li><li>注释：note</li><li>指南：guild</li><li>服务：service</li><li>热点：hot</li><li>新闻：news</li><li>下载：download</li><li>投票：vote</li><li>合作伙伴：partner</li><li>友情链接：link</li><li>版权：copyright</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">1. 内容优先,表现为辅</span><br><span class="line">  2. css命名中英文对照</span><br><span class="line">  current 当前    hover 悬停    selected 挑选   disabled 禁用   focus 得到焦点    blur 失去焦点   checked 勾选    success 成功    error 出错</span><br><span class="line"></span><br><span class="line">  header(hd) 头部   content(cnt) 内容   title(tit) 标题   item 项目（条）    cell 单元   image/pic(img) 图片   text(txt) 文字    top 顶部    scrubber 时序菜单</span><br><span class="line"></span><br><span class="line">  nav 导航    mainbav 主导航   subnav 子导航    topnav 顶部导航   breadcrumb 面包屑导航</span><br><span class="line"></span><br><span class="line">  flink 友情链接    footer 尾    copyright 版权</span><br><span class="line"></span><br><span class="line">  menu 菜单   submenu 子菜单   dropdown 下拉菜单</span><br><span class="line"></span><br><span class="line">  searchBar 搜索条   search 搜索条    searchTxt 搜索框   searchBtn 搜索按钮    search_key 搜索词</span><br><span class="line"></span><br><span class="line">  member 会员   ucenter 用户中心    loginBar 登陆条    login 登录    loginBtn 登录按钮   regsiter 注册按钮   btn-regsiter注册按钮    name 用户名    password 密码   nickname 昵称   mobilephone/mobile 手机    telephone/tel 电话   defaultavatar 默认头像</span><br><span class="line"></span><br><span class="line">  hot 热点    news 新闻   banner/AD 广告    download 下载</span><br><span class="line"></span><br><span class="line">  content 内容    title 标题    summary 摘要    time 时间</span><br><span class="line"></span><br><span class="line">  share 分享    digg 顶    like 喜欢</span><br><span class="line"></span><br><span class="line">  list 列表   pList 图片列表    tList 文字列表    tpList 图文列表</span><br><span class="line"></span><br><span class="line">  table 表格    row 行   column 列    gutter 间隔   viewport 视口</span><br><span class="line"></span><br><span class="line">  tab 标签    tags 标签   scroll 滚动</span><br><span class="line"></span><br><span class="line">  sidebar 侧边栏   column 栏目   section 区块    msg 提示信息    status 状态   vote 投票   tips 小技巧    guild 指南    note 注释</span><br><span class="line"></span><br><span class="line">  icon- 图标    btn- 按钮</span><br><span class="line"></span><br><span class="line">  goods 商品    goodsList 商品列表    goodsDetail 商品详情    goodsInfo 商品信息</span><br><span class="line"></span><br><span class="line">  tuan 团购   tuanList 团购列表   tuanDetail  团购详情    tuanInfo 团购信息</span><br><span class="line"></span><br><span class="line">  transition 动画   shadow 阴影   fade 淡入淡出   flip 翻页效    slide 滑动    slideup 上滑动   slidedown 下滑动   turn 翻页   horizontal 水平   vertical 垂直   collapsible 折叠    corners 拐角    flow 流    reverse 反向    pop 弹窗</span><br><span class="line"></span><br><span class="line">  count 总数/计数   plus 加号/正   minus 减号/负    controlgroup 控制组</span><br></pre></td></tr></table></figure><h2 id="样式文件命名"><a href="#样式文件命名" class="headerlink" title="样式文件命名"></a>样式文件命名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">　　主要的:master.css</span><br><span class="line">　　布局版面:layout.css</span><br><span class="line">　　专栏:columns.css</span><br><span class="line">　　文字:font.css</span><br><span class="line">　　打印样式:print.css</span><br><span class="line">　　主题:themes.css</span><br><span class="line">说明：均为class，需要扩展，则在当前命名内以“_“(下划线)后缀自定名称。</span><br><span class="line">我习惯称列表页为list，新闻列表则为newslist，图片列表为piclist，</span><br><span class="line">内容页为view，</span><br><span class="line">/**/</span><br><span class="line">整体大框架：#wrapper</span><br><span class="line">大框架内：#inwrapper</span><br><span class="line">/////////////////////////////////////////////////////////////////////////////////////////////////////////</span><br><span class="line">顶部及banner：.top</span><br><span class="line">顶部及banner内：.intop</span><br><span class="line">Logo：.logo</span><br><span class="line">Banner：.banner</span><br><span class="line">导航：.menu</span><br><span class="line">导航内：.inmenu</span><br><span class="line">        .Menuul</span><br><span class="line">        .Menuul li</span><br><span class="line">        .Menuul li a</span><br><span class="line">下拉菜单：.inmenu_xiala</span><br><span class="line">          .Inmenu_xialaul</span><br><span class="line">          .Inmenu_xialaul li</span><br><span class="line">          .Inmenu_xialaul li a</span><br><span class="line">///////////////////////////////////////////////////////////////////////////////////////////////////////////</span><br><span class="line">主体内容：.mainWrapper</span><br><span class="line">主体内容内：.inmainwrapper</span><br><span class="line">左侧拦：.sideleft</span><br><span class="line">左侧内：.insideleft</span><br><span class="line">右侧栏：.sideright</span><br><span class="line">右侧内：.insideright</span><br><span class="line">中间：.sidecenter</span><br><span class="line">中间内：.insidecenter</span><br><span class="line">/////////////////////////////////////////////////////////////////////////////////////////////////////////////</span><br><span class="line">底部：.foot</span><br><span class="line">底部内：.infoot</span><br><span class="line">////////////////////////////////////////////////////////////////////////////////////////////////////////////</span><br><span class="line">/*其他命名*/</span><br><span class="line">搜索：.search</span><br><span class="line">搜索内：.insearch</span><br><span class="line">搜索条：.searchselect</span><br><span class="line">搜索按钮：.serachbuttom</span><br><span class="line">输入文本框：.input</span><br><span class="line">.select</span><br><span class="line">/*表格样式*/</span><br><span class="line">表格整体框架：.listbox</span><br><span class="line">表格的宽度：.listbox-table</span><br><span class="line">表格头部文字样式：.listbox-header</span><br><span class="line">表格正文文字样式：.listbox-entry</span><br><span class="line">/*通用型*/</span><br><span class="line">通用：.GM/*这个有点郁闷,英文太差...*/</span><br><span class="line">通用内：.INGM</span><br><span class="line">通用左浮动：.GMfl(GM FLOAT LEFT)</span><br><span class="line">通用右浮动：.GMfr(GM FLOAT RIGHT)</span><br><span class="line">/*通用图片样式*/</span><br><span class="line">通用图片样式：.img</span><br><span class="line">/*清除浮动*/</span><br><span class="line">清除所有浮动：.clear</span><br><span class="line">清除左侧浮动：.clearleft</span><br><span class="line">清除右侧浮动：.clearright</span><br><span class="line">/*文字样式*/</span><br><span class="line">文字：.font</span><br><span class="line">/*新闻列表*/</span><br><span class="line">新闻列表：.fontnews</span><br><span class="line">/*View页字体总样式*/</span><br><span class="line">VIEW页字体：.fontview</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;页面结构&quot;&gt;&lt;a href=&quot;#页面结构&quot; class=&quot;headerlink&quot; title=&quot;页面结构&quot;&gt;&lt;/a&gt;页面结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;容器: container&lt;/li&gt;
&lt;li&gt;页头：header&lt;/li&gt;
&lt;li&gt;内容：content/container&lt;/li&gt;
&lt;li&gt;页面主体：main&lt;/li&gt;
&lt;li&gt;页尾：footer&lt;/li&gt;
&lt;li&gt;导航：nav&lt;/li&gt;
&lt;li&gt;侧栏：sidebar&lt;/li&gt;
&lt;li&gt;栏目：column&lt;/li&gt;
&lt;li&gt;页面外围控制整体布局宽度：wrapper&lt;/li&gt;
&lt;li&gt;左右中：left right center&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;导航&quot;&gt;&lt;a href=&quot;#导航&quot; class=&quot;headerlink&quot; title=&quot;导航&quot;&gt;&lt;/a&gt;导航&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;导航：nav&lt;/li&gt;
&lt;li&gt;主导航：mainbav&lt;/li&gt;
&lt;li&gt;子导航：subnav&lt;/li&gt;
&lt;li&gt;顶导航：topnav&lt;/li&gt;
&lt;li&gt;边导航：sidebar&lt;/li&gt;
&lt;li&gt;左导航：leftsidebar&lt;/li&gt;
&lt;li&gt;右导航：rightsidebar&lt;/li&gt;
&lt;li&gt;菜单：menu&lt;/li&gt;
&lt;li&gt;子菜单：submenu&lt;/li&gt;
&lt;li&gt;标题: title&lt;/li&gt;
&lt;li&gt;摘要: summary&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>常用JS函数，方法举例</title>
    <link href="http://yoursite.com/2018/09/30/%E5%B8%B8%E7%94%A8js/"/>
    <id>http://yoursite.com/2018/09/30/常用js/</id>
    <published>2018-09-30T14:33:31.000Z</published>
    <updated>2018-10-07T15:41:06.477Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-push-与unshift-方法"><a href="#1-push-与unshift-方法" class="headerlink" title="1. push()与unshift()方法"></a>1. push()与unshift()方法</h3><blockquote><p>把一个或多个元素添加到数组的尾部，请使用 push() 方法<br>   往数组头部添加元素，用unshift（）方法</p></blockquote><h3 id="2-split-‘-’-1"><a href="#2-split-‘-’-1" class="headerlink" title="2. split(‘.’)[1]"></a>2. split(‘.’)[1]</h3><blockquote><p>这里split(‘.’)[1] 是一种缩写形式，把它拆开来看实际就是<br>先用split(‘.’)方法将字符串以”.”开割形成一个字符串数组，然后再通过索引[1]取出所得数组中的第二个元素的值</p></blockquote><h3 id="3-findIndex"><a href="#3-findIndex" class="headerlink" title="3. findIndex()"></a>3. findIndex()</h3><blockquote><p>findIndex() 方法返回传入一个测试条件（函数）符合条件的数组第一个元素位置。</p></blockquote><h3 id="4-substr"><a href="#4-substr" class="headerlink" title="4. substr()"></a>4. substr()</h3><blockquote><p>substr() 方法可在字符串中抽取从 start 下标开始的指定数目的字符。<br>在本例中，我们将使用 substr() 从字符串中提取一些字符：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">var str=&quot;Hello world!&quot;</span><br><span class="line">document.write(str.substr(3,7))</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">输出：</span><br><span class="line">lo worl</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="5-js验证手机格式"><a href="#5-js验证手机格式" class="headerlink" title="5. js验证手机格式"></a>5. js验证手机格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param str 对应手机号码</span><br><span class="line"> * @returns &#123;boolean&#125; 结果返回 true 和 false。</span><br><span class="line"> * true 为正确手机号码</span><br><span class="line"> * false 为错误手机号码</span><br><span class="line"> */</span><br><span class="line">function verifyPhoneNumberFormat(str)&#123;</span><br><span class="line">    var myreg = /^(((13[0-9]&#123;1&#125;)|(15[0-9]&#123;1&#125;)|(17[0-9]&#123;1&#125;)|(18[0-9]&#123;1&#125;))+\d&#123;8&#125;)$/;</span><br><span class="line">    return myreg.test(str);</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">verifyPhoneNumberFormat(&quot;18818592555&quot;);</span><br></pre></td></tr></table></figure><h3 id="6-JS验证身份证格式"><a href="#6-JS验证身份证格式" class="headerlink" title="6. JS验证身份证格式"></a>6. JS验证身份证格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 根据〖中华人民共和国国家标准 GB 11643-1999〗中有关公民身份号码的规定，公民身份号码是特征组合码，由十七位数字本体码和一位数字校验码组成。排列顺序从左至右依次为：六位数字地址码，八位数字出生日期码，三位数字顺序码和一位数字校验码。</span><br><span class="line"> * 地址码表示编码对象常住户口所在县(市、旗、区)的行政区划代码。</span><br><span class="line"> * 出生日期码表示编码对象出生的年、月、日，其中年份用四位数字表示，年、月、日之间不用分隔符。</span><br><span class="line"> * 顺序码表示同一地址码所标识的区域范围内，对同年、月、日出生的人员编定的顺序号。顺序码的奇数分给男性，偶数分给女性。</span><br><span class="line"> * 校验码是根据前面十七位数字码，按照ISO 7064:1983.MOD 11-2校验码计算出来的检验码。</span><br><span class="line"> * 出生日期计算方法。</span><br><span class="line"> * 15位的身份证编码首先把出生年扩展为4位，简单的就是增加一个19或18,这样就包含了所有1800-1999年出生的人;</span><br><span class="line"> * 2000年后出生的肯定都是18位的了没有这个烦恼，至于1800年前出生的,那啥那时应该还没身份证号这个东东，⊙﹏⊙b汗...</span><br><span class="line"> * 下面是正则表达式:</span><br><span class="line"> * 出生日期1800-2099  (18|19|20)?\d&#123;2&#125;(0[1-9]|1[12])(0[1-9]|[12]\d|3[01])</span><br><span class="line"> * 身份证正则表达式 /^\d&#123;6&#125;(18|19|20)?\d&#123;2&#125;(0[1-9]|1[12])(0[1-9]|[12]\d|3[01])\d&#123;3&#125;(\d|X)$/i</span><br><span class="line"> * 15位校验规则 6位地址编码+6位出生日期+3位顺序号</span><br><span class="line"> * 18位校验规则 6位地址编码+8位出生日期+3位顺序号+1位校验位</span><br><span class="line"> * 校验位规则     公式:∑(ai×Wi)(mod 11)……………………………………(1)</span><br><span class="line"> * 公式(1)中：</span><br><span class="line"> * i----表示号码字符从由至左包括校验码在内的位置序号；</span><br><span class="line"> * ai----表示第i位置上的号码字符值；</span><br><span class="line"> * Wi----示第i位置上的加权因子，其数值依据公式Wi=2^(n-1）(mod 11)计算得出。</span><br><span class="line"> * i 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1</span><br><span class="line"> * Wi 7 9 10 5 8 4 2 1 6 3 7 9 10 5 8 4 2 1</span><br><span class="line"> * ============================================================================================</span><br><span class="line"> * 身份证号合法性验证</span><br><span class="line"> * 支持15位和18位身份证号</span><br><span class="line"> * 支持地址编码、出生日期、校验位验证</span><br><span class="line"> * @param code</span><br><span class="line"> * @returns &#123;*[]&#125; 该函数返回一个数组 [true,&apos;&apos;] 或 [false,&quot;身份证号格式错误&quot;]</span><br><span class="line"> * @constructor</span><br><span class="line"> */</span><br><span class="line">function IdentityCodeValid(code) &#123;</span><br><span class="line">    var city=&#123;11:&quot;北京&quot;,12:&quot;天津&quot;,13:&quot;河北&quot;,14:&quot;山西&quot;,15:&quot;内蒙古&quot;,21:&quot;辽宁&quot;,22:&quot;吉林&quot;,23:&quot;黑龙江 &quot;,31:&quot;上海&quot;,32:&quot;江苏&quot;,33:&quot;浙江&quot;,34:&quot;安徽&quot;,35:&quot;福建&quot;,36:&quot;江西&quot;,37:&quot;山东&quot;,41:&quot;河南&quot;,42:&quot;湖北 &quot;,43:&quot;湖南&quot;,44:&quot;广东&quot;,45:&quot;广西&quot;,46:&quot;海南&quot;,50:&quot;重庆&quot;,51:&quot;四川&quot;,52:&quot;贵州&quot;,53:&quot;云南&quot;,54:&quot;西藏 &quot;,61:&quot;陕西&quot;,62:&quot;甘肃&quot;,63:&quot;青海&quot;,64:&quot;宁夏&quot;,65:&quot;新疆&quot;,71:&quot;台湾&quot;,81:&quot;香港&quot;,82:&quot;澳门&quot;,91:&quot;国外 &quot;&#125;;</span><br><span class="line">    var tip = &quot;&quot;;</span><br><span class="line">    var pass= true;</span><br><span class="line"></span><br><span class="line">    if(!code || !/^\d&#123;6&#125;(18|19|20)?\d&#123;2&#125;(0[1-9]|1[012])(0[1-9]|[12]\d|3[01])\d&#123;3&#125;(\d|[xX])$/i.test(code))&#123;</span><br><span class="line">        tip = &quot;身份证号格式错误&quot;;</span><br><span class="line">        pass = false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    else if(!city[code.substr(0,2)])&#123;</span><br><span class="line">        tip = &quot;地址编码错误&quot;;</span><br><span class="line">        pass = false;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        //18位身份证需要验证最后一位校验位</span><br><span class="line">        if(code.length == 18)&#123;</span><br><span class="line">            code = code.split(&apos;&apos;);</span><br><span class="line">            //∑(ai×Wi)(mod 11)</span><br><span class="line">            //加权因子</span><br><span class="line">            var factor = [ 7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2 ];</span><br><span class="line">            //校验位</span><br><span class="line">            var parity = [ 1, 0, &apos;X&apos;, 9, 8, 7, 6, 5, 4, 3, 2 ];</span><br><span class="line">            var sum = 0;</span><br><span class="line">            var ai = 0;</span><br><span class="line">            var wi = 0;</span><br><span class="line">            for (var i = 0; i &lt; 17; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                ai = code[i];</span><br><span class="line">                wi = factor[i];</span><br><span class="line">                sum += ai * wi;</span><br><span class="line">            &#125;</span><br><span class="line">            var last = parity[sum % 11];</span><br><span class="line">            if(parity[sum % 11] != code[17])&#123;</span><br><span class="line">                tip = &quot;校验位错误,结尾是字母请注意大小写&quot;;</span><br><span class="line">                pass =false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // if(!pass) alert(tip);</span><br><span class="line">    //return pass;</span><br><span class="line">    return [pass,tip]</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">IdentityCodeValid(&quot;110000198304102033&quot;);</span><br></pre></td></tr></table></figure><h3 id="7-JS判断两个数组是否相等"><a href="#7-JS判断两个数组是否相等" class="headerlink" title="7. JS判断两个数组是否相等"></a>7. JS判断两个数组是否相等</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS判断两个数组是否相等</span><br><span class="line"> * @param &#123;Array&#125; arr1</span><br><span class="line"> * @param &#123;Array&#125; arr2</span><br><span class="line"> * @returns &#123;boolean&#125; 返回true 或 false</span><br><span class="line"> */</span><br><span class="line">function arrayEqual(arr1, arr2) &#123;</span><br><span class="line">    if (arr1 === arr2) return true;</span><br><span class="line">    if (arr1.length != arr2.length) return false;</span><br><span class="line">    for (var i = 0; i &lt; arr1.length; ++i) &#123;</span><br><span class="line">        if (arr1[i] !== arr2[i]) return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">var arr1 = [&apos;a&apos;,&apos;b&apos;];</span><br><span class="line">var arr2 = [&apos;a&apos;,&apos;b&apos;];</span><br><span class="line">arrayEqual(arr1,arr2);</span><br></pre></td></tr></table></figure><h3 id="8-JS格式化金额xxx-xxx-xxx"><a href="#8-JS格式化金额xxx-xxx-xxx" class="headerlink" title="8. JS格式化金额xxx,xxx,xxx"></a>8. JS格式化金额xxx,xxx,xxx</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS格式化金额</span><br><span class="line"> * @param money</span><br><span class="line"> * @param type</span><br><span class="line"> * @returns &#123;*&#125;</span><br><span class="line"> */</span><br><span class="line">function convert(money , type) &#123;</span><br><span class="line">    if (/[^0-9\.]/.test(money))</span><br><span class="line">        return &quot;0&quot;;</span><br><span class="line">    if (money == null || money == &quot;&quot;)</span><br><span class="line">        return &quot;0&quot;;</span><br><span class="line">    money = money.toString().replace(/^(\d*)$/, &quot;$1.&quot;);</span><br><span class="line">    money = (money + &quot;00&quot;).replace(/(\d*\.\d\d)\d*/, &quot;$1&quot;);</span><br><span class="line">    money = money.replace(&quot;.&quot;, &quot;,&quot;);</span><br><span class="line">    var re = /(\d)(\d&#123;3&#125;,)/;</span><br><span class="line">    while (re.test(money))</span><br><span class="line">        money = money.replace(re, &quot;$1,$2&quot;);</span><br><span class="line">    money = money.replace(/,(\d\d)$/, &quot;.$1&quot;);</span><br><span class="line">    if (type == 0) &#123;// 不带小数位(默认是有小数位)</span><br><span class="line">        var a = money.split(&quot;.&quot;);</span><br><span class="line">        if (a[1] == &quot;00&quot;) &#123;</span><br><span class="line">            money = a[0];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return money;</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">convert(311546161685);  //  311,546,161,685.00</span><br><span class="line">convert(311546161685,0);  //  311,546,161,685</span><br></pre></td></tr></table></figure><h3 id="9-JS数组去重"><a href="#9-JS数组去重" class="headerlink" title="9. JS数组去重"></a>9. JS数组去重</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS数组去重</span><br><span class="line"> * @param arr 数组</span><br><span class="line"> * @returns &#123;Array&#125; 结果返回数组</span><br><span class="line"> */</span><br><span class="line">function removeReapt(arrs)&#123;</span><br><span class="line">    var arr= [];</span><br><span class="line">    var json = &#123;&#125;;</span><br><span class="line">    for(var i = 0,len = arrs.length; i &lt; len; i++)&#123;</span><br><span class="line">        if(!json[arrs[i]])&#123;</span><br><span class="line">            arr.push(arrs[i]);</span><br><span class="line">            json[arrs[i]] = 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">var arr = [11,22,33,46,79,11,46,97,79,46];</span><br><span class="line">removeReapt(arr);</span><br></pre></td></tr></table></figure><h3 id="10-JS数组冒泡排序"><a href="#10-JS数组冒泡排序" class="headerlink" title="10. JS数组冒泡排序"></a>10. JS数组冒泡排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 冒泡排序</span><br><span class="line"> * @param array 数组</span><br><span class="line"> * @returns &#123;*&#125;</span><br><span class="line"> */</span><br><span class="line">function maoPaoSort(array)&#123;</span><br><span class="line">    var temp;</span><br><span class="line"></span><br><span class="line">    for(var i=0;i&lt;array.length;i++)&#123; //比较多少趟，从第一趟开始</span><br><span class="line">        for(var j=0;j&lt;array.length-i-1;j++)&#123; //每一趟比较多少次数</span><br><span class="line">            if(array[j]&gt;array[j+1])&#123;</span><br><span class="line">                temp=array[j];</span><br><span class="line">                array[j]=array[j+1];</span><br><span class="line">                array[j+1]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return array;</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">var arrry=[85,24,63,17,31,17,86,50];</span><br><span class="line">console.log(maoPaoSort(arrry));</span><br></pre></td></tr></table></figure><h3 id="11-JS判断是否以某个字符串开头"><a href="#11-JS判断是否以某个字符串开头" class="headerlink" title="11. JS判断是否以某个字符串开头"></a>11. JS判断是否以某个字符串开头</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 判断是否以某个字符串开头</span><br><span class="line"> * @param str 字符串</span><br><span class="line"> * @param s 以哪个字符串开头</span><br><span class="line"> * @returns &#123;boolean&#125; 返回true为正确，false为错误</span><br><span class="line"> */</span><br><span class="line">function startWith(str,s)&#123;</span><br><span class="line">    return str.indexOf(s) == 0;</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">var test = &quot;sdasd  sdx adsad asd sa &quot;;</span><br><span class="line">console.log(startWith(test,&quot;a&quot;));//例如：false</span><br></pre></td></tr></table></figure><h3 id="12-JS判断是否以某个字符串结束"><a href="#12-JS判断是否以某个字符串结束" class="headerlink" title="12. JS判断是否以某个字符串结束"></a>12. JS判断是否以某个字符串结束</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 判断是否以某个字符串结束</span><br><span class="line"> * @param str 总字符串</span><br><span class="line"> * @param s 某个字符串</span><br><span class="line"> * @returns &#123;boolean&#125;</span><br><span class="line"> */</span><br><span class="line">function endWith(str,s)&#123;</span><br><span class="line">    var d = str.length - s.length;</span><br><span class="line">    return (d &gt;= 0 &amp;&amp; str.lastIndexOf(s) == d);</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">var test = &quot;sdasd  sdx adsad asd sa&quot;;</span><br><span class="line">console.log(endWith(test,&quot;a&quot;));//例如:true</span><br></pre></td></tr></table></figure><h3 id="13-JS判断是否为数字类型"><a href="#13-JS判断是否为数字类型" class="headerlink" title="13. JS判断是否为数字类型"></a>13. JS判断是否为数字类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 判断是否为数字类型</span><br><span class="line"> * @param value 判断的值</span><br><span class="line"> * @returns &#123;boolean&#125;</span><br><span class="line"> */</span><br><span class="line">function isDigit(value) &#123;</span><br><span class="line">    var patrn = /^[0-9]*$/;</span><br><span class="line">    if (patrn.exec(value) == null || value == &quot;&quot;) &#123;</span><br><span class="line">        return false</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">var test = &quot;5s&quot;;</span><br><span class="line">var test2 = 5;</span><br><span class="line">console.log(isDigit(test));// false</span><br><span class="line">console.log(isDigit(test2));// true</span><br></pre></td></tr></table></figure><h3 id="14-JS完美判断是否为网址"><a href="#14-JS完美判断是否为网址" class="headerlink" title="14. JS完美判断是否为网址"></a>14. JS完美判断是否为网址</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS完美判断是否为网址</span><br><span class="line"> * @param strUrl URL地址</span><br><span class="line"> * @returns &#123;boolean&#125; 返回真或者假</span><br><span class="line"> * @constructor</span><br><span class="line"> */</span><br><span class="line">function IsURL(strUrl) &#123;</span><br><span class="line">    var regular = /^\b(((https?|ftp):\/\/)?[-a-z0-9]+(\.[-a-z0-9]+)*\.(?:com|edu|gov|int|mil|net|org|biz|info|name|museum|asia|coop|aero|[a-z][a-z]|((25[0-5])|(2[0-4]\d)|(1\d\d)|([1-9]\d)|\d))\b(\/[-a-z0-9_:\@&amp;?=+,.!\/~%\$]*)?)$/i</span><br><span class="line">    if (regular.test(strUrl)) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">console.log(IsURL(&quot;https://www.notelist.cn&quot;));// true</span><br></pre></td></tr></table></figure><h3 id="15-JS获取页面高度"><a href="#15-JS获取页面高度" class="headerlink" title="15. JS获取页面高度"></a>15. JS获取页面高度</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取页面高度</span><br><span class="line"> * @returns &#123;number&#125; 返回对应高度数值</span><br><span class="line"> */</span><br><span class="line">function getPageHeight()&#123;</span><br><span class="line">    var g = document, a = g.body, f = g.documentElement, d = g.compatMode == &quot;BackCompat&quot;</span><br><span class="line">        ? a</span><br><span class="line">        : g.documentElement;</span><br><span class="line">    return Math.max(f.scrollHeight, a.scrollHeight, d.clientHeight);</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">console.log(getPageHeight());   // 例如：255</span><br></pre></td></tr></table></figure><h3 id="16-JS随机数时间戳"><a href="#16-JS随机数时间戳" class="headerlink" title="16. JS随机数时间戳"></a>16. JS随机数时间戳</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS随机数时间戳</span><br><span class="line"> * @returns &#123;string&#125;</span><br><span class="line"> */</span><br><span class="line">function uniqueId()&#123;</span><br><span class="line">    var a=Math.random;</span><br><span class="line">    var b=parseInt;</span><br><span class="line">    return Number(new Date()).toString()+b(10*a())+b(10*a())+b(10*a());</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">console.log(uniqueId());// 例如：1525075670818519</span><br></pre></td></tr></table></figure><h3 id="17-JS时间个性化输出功能"><a href="#17-JS时间个性化输出功能" class="headerlink" title="17. JS时间个性化输出功能"></a>17. JS时间个性化输出功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS时间个性化输出功能</span><br><span class="line"> * 1、&lt; 60s, 显示为“刚刚”</span><br><span class="line"> * 2、&gt;= 1min &amp;&amp; &lt; 60 min, 显示与当前时间差“XX分钟前”</span><br><span class="line"> * 3、&gt;= 60min &amp;&amp; &lt; 1day, 显示与当前时间差“今天 XX:XX”</span><br><span class="line"> * 4、&gt;= 1day &amp;&amp; &lt; 1year, 显示日期“XX月XX日 XX:XX”</span><br><span class="line"> * 5、&gt;= 1year, 显示具体日期“XXXX年XX月XX日 XX:XX”</span><br><span class="line"> * @param time</span><br><span class="line"> * @returns &#123;string&#125;</span><br><span class="line"> */</span><br><span class="line">function timeFormat(time)&#123;</span><br><span class="line">    var date = new Date(time),</span><br><span class="line">        curDate = new Date(),</span><br><span class="line">        year = date.getFullYear(),</span><br><span class="line">        month = date.getMonth() + 10,</span><br><span class="line">        day = date.getDate(),</span><br><span class="line">        hour = date.getHours(),</span><br><span class="line">        minute = date.getMinutes(),</span><br><span class="line">        curYear = curDate.getFullYear(),</span><br><span class="line">        curHour = curDate.getHours(),</span><br><span class="line">        timeStr;</span><br><span class="line"></span><br><span class="line">    if(year &lt; curYear)&#123;</span><br><span class="line">        timeStr = year +&apos;年&apos;+ month +&apos;月&apos;+ day +&apos;日 &apos;+ hour +&apos;:&apos;+ minute;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        var pastTime = curDate - date,</span><br><span class="line">            pastH = pastTime/3600000;</span><br><span class="line"></span><br><span class="line">        if(pastH &gt; curHour)&#123;</span><br><span class="line">            timeStr = month +&apos;月&apos;+ day +&apos;日 &apos;+ hour +&apos;:&apos;+ minute;</span><br><span class="line">        &#125;else if(pastH &gt;= 1)&#123;</span><br><span class="line">            timeStr = &apos;今天 &apos; + hour +&apos;:&apos;+ minute +&apos;分&apos;;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            var pastM = curDate.getMinutes() - minute;</span><br><span class="line">            if(pastM &gt; 1)&#123;</span><br><span class="line">                timeStr = pastM +&apos;分钟前&apos;;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                timeStr = &apos;刚刚&apos;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return timeStr;</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">console.log(timeFormat(new Date()));// 例：刚刚</span><br></pre></td></tr></table></figure><h3 id="18-JS判断是否是中文名"><a href="#18-JS判断是否是中文名" class="headerlink" title="18. JS判断是否是中文名"></a>18. JS判断是否是中文名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS判断是否是中文名</span><br><span class="line"> * @param value</span><br><span class="line"> * @returns &#123;boolean&#125;</span><br><span class="line"> */</span><br><span class="line">function isChinese(value)&#123;</span><br><span class="line">    var reg = /^[\u4e00-\u9fa5]+$/i;</span><br><span class="line">    if (!reg.test(value))</span><br><span class="line">    &#123;</span><br><span class="line">        //  不是中文名</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    //  是中文名</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">console.log(isChinese(&quot;牛逼&quot;));// true</span><br></pre></td></tr></table></figure><h3 id="19-JS获取地址栏参数的值"><a href="#19-JS获取地址栏参数的值" class="headerlink" title="19. JS获取地址栏参数的值"></a>19. JS获取地址栏参数的值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS获取地址栏参数的值</span><br><span class="line"> * @param name 对应的参数</span><br><span class="line"> * @returns &#123;*&#125; 如果有，则返回参数值，没有则返回null</span><br><span class="line"> */</span><br><span class="line">function getUrlParam(name)&#123;</span><br><span class="line">    var reg = new RegExp(&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;);</span><br><span class="line">    var r = window.location.search.substr(1).match(reg);</span><br><span class="line">    if (r != null) &#123;</span><br><span class="line">        return unescape(r[2]);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">// 若当前的URL地址为：a.html?t1=1&amp;t2=2&amp;t3=3</span><br><span class="line">console.log(getUrlParam(&quot;t1&quot;));// 1</span><br></pre></td></tr></table></figure><h3 id="20-JS字符串反序"><a href="#20-JS字符串反序" class="headerlink" title="20. JS字符串反序"></a>20. JS字符串反序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS字符串反序</span><br><span class="line"> * @param text 需要进行反序的字符串</span><br><span class="line"> * @returns &#123;string&#125; 返回反序之后的字符串</span><br><span class="line"> * @constructor</span><br><span class="line"> */</span><br><span class="line">function IsReverse(text)&#123;</span><br><span class="line">    return text.split(&apos;&apos;).reverse().join(&apos;&apos;);</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">console.log(IsReverse(&quot;Hello!&quot;));//!olleH</span><br></pre></td></tr></table></figure><h3 id="21-JS现金额转大写"><a href="#21-JS现金额转大写" class="headerlink" title="21. JS现金额转大写"></a>21. JS现金额转大写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @desc   JS现金额转大写</span><br><span class="line"> * @param  &#123;Number&#125; n</span><br><span class="line"> * @return &#123;String&#125;</span><br><span class="line"> */</span><br><span class="line">function digitUppercase(n) &#123;</span><br><span class="line">    var fraction = [&apos;角&apos;, &apos;分&apos;];</span><br><span class="line">    var digit = [</span><br><span class="line">        &apos;零&apos;, &apos;壹&apos;, &apos;贰&apos;, &apos;叁&apos;, &apos;肆&apos;,</span><br><span class="line">        &apos;伍&apos;, &apos;陆&apos;, &apos;柒&apos;, &apos;捌&apos;, &apos;玖&apos;</span><br><span class="line">    ];</span><br><span class="line">    var unit = [</span><br><span class="line">        [&apos;元&apos;, &apos;万&apos;, &apos;亿&apos;],</span><br><span class="line">        [&apos;&apos;, &apos;拾&apos;, &apos;佰&apos;, &apos;仟&apos;]</span><br><span class="line">    ];</span><br><span class="line">    var head = n &lt; 0 ? &apos;欠&apos; : &apos;&apos;;</span><br><span class="line">    n = Math.abs(n);</span><br><span class="line">    var s = &apos;&apos;;</span><br><span class="line">    for (var i = 0; i &lt; fraction.length; i++) &#123;</span><br><span class="line">        s += (digit[Math.floor(n * 10 * Math.pow(10, i)) % 10] + fraction[i]).replace(/零./, &apos;&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">    s = s || &apos;整&apos;;</span><br><span class="line">    n = Math.floor(n);</span><br><span class="line">    for (var i = 0; i &lt; unit[0].length &amp;&amp; n &gt; 0; i++) &#123;</span><br><span class="line">        var p = &apos;&apos;;</span><br><span class="line">        for (var j = 0; j &lt; unit[1].length &amp;&amp; n &gt; 0; j++) &#123;</span><br><span class="line">            p = digit[n % 10] + unit[1][j] + p;</span><br><span class="line">            n = Math.floor(n / 10);</span><br><span class="line">        &#125;</span><br><span class="line">        s = p.replace(/(零.)*零$/, &apos;&apos;).replace(/^$/, &apos;零&apos;) + unit[0][i] + s;</span><br><span class="line">    &#125;</span><br><span class="line">    return head + s.replace(/(零.)*零元/, &apos;元&apos;)</span><br><span class="line">        .replace(/(零.)+/g, &apos;零&apos;)</span><br><span class="line">        .replace(/^整$/, &apos;零元整&apos;);</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">console.log(digitUppercase(1023456789.56));// 壹拾亿贰仟叁佰肆拾伍万陆仟柒佰捌拾玖元伍角伍分</span><br></pre></td></tr></table></figure><h3 id="22-JS允许输入小数位的数字"><a href="#22-JS允许输入小数位的数字" class="headerlink" title="22. JS允许输入小数位的数字"></a>22. JS允许输入小数位的数字</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS允许输入小数位的数字</span><br><span class="line"> * @param curObj</span><br><span class="line"> */</span><br><span class="line">function clearNoFloat(curObj)&#123;</span><br><span class="line">    curObj.value = curObj.value.replace(/[^\d.]/g,&quot;&quot;);  //清除“数字”和“.”以外的字符</span><br><span class="line">    curObj.value = curObj.value.replace(/^\./g,&quot;&quot;);  //验证第一个字符是数字而不是.</span><br><span class="line">    curObj.value = curObj.value.replace(/\.&#123;2,&#125;/g,&quot;.&quot;); //只保留第一个. 清除多余的.</span><br><span class="line">    curObj.value = curObj.value.replace(&quot;.&quot;,&quot;$#$&quot;).replace(/\./g,&quot;&quot;).replace(&quot;$#$&quot;,&quot;.&quot;);</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">&lt;input type=&quot;text&quot; onkeyup=&quot;clearNoFloat(this)&quot;&gt; // JS允许输入小数位，如果是其他字符，则会替换掉</span><br></pre></td></tr></table></figure><h3 id="23-JS限制只能是整数"><a href="#23-JS限制只能是整数" class="headerlink" title="23. JS限制只能是整数"></a>23. JS限制只能是整数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS限制只能是整数，不能是小数</span><br><span class="line"> * @param curObj</span><br><span class="line"> */</span><br><span class="line">function clearNoInt(curObj)&#123;</span><br><span class="line">    curObj.value = curObj.value.replace(/[^\d]/g,&quot;&quot;);  //清除“数字”和“.”以外的字符</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">&lt;input type=&quot;text&quot; onkeyup=&quot;clearNoInt(this)&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="24-JS检测字符串是否为空"><a href="#24-JS检测字符串是否为空" class="headerlink" title="24. JS检测字符串是否为空"></a>24. JS检测字符串是否为空</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS检测字符串是否为空</span><br><span class="line"> * @param str</span><br><span class="line"> * @returns &#123;boolean&#125;</span><br><span class="line"> */</span><br><span class="line">function checkIsEmpty(str) &#123;</span><br><span class="line">    if (null != str &amp;&amp; undefined != str &amp;&amp; &quot;&quot; != str) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">console.log(checkIsEmpty(&quot;&quot;));//true</span><br></pre></td></tr></table></figure><h3 id="25-JS将数值四舍五入到保留的小数位数"><a href="#25-JS将数值四舍五入到保留的小数位数" class="headerlink" title="25. JS将数值四舍五入到保留的小数位数"></a>25. JS将数值四舍五入到保留的小数位数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 将数值四舍五入到保留的小数位数</span><br><span class="line"> * @param num 待四舍五入数值</span><br><span class="line"> * @param len 保留小数位数</span><br><span class="line"> * @returns &#123;number&#125;</span><br><span class="line"> */</span><br><span class="line">function getRound(num,len) &#123;</span><br><span class="line">    return Math.round(num * Math.pow(10, len)) / Math.pow(10, len);</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">getRound(6.123456,4); // 6.1235</span><br></pre></td></tr></table></figure><h3 id="26-JS切割相应小数点后位数，并将小数点后多余的0-清空"><a href="#26-JS切割相应小数点后位数，并将小数点后多余的0-清空" class="headerlink" title="26. JS切割相应小数点后位数，并将小数点后多余的0 清空"></a>26. JS切割相应小数点后位数，并将小数点后多余的0 清空</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 切割相应小数点后位数，并将小数点后多余的0 清空</span><br><span class="line"> * @param value 需要切割的数值</span><br><span class="line"> * @param num 需要的小数位数</span><br><span class="line"> * @returns &#123;string&#125;</span><br><span class="line"> */</span><br><span class="line">function cutRoundNum( value , num ) &#123;</span><br><span class="line">    var value = value.toString();</span><br><span class="line">    value =  value.substr(0,value.indexOf(&apos;.&apos;)+1) + value.substr(value.indexOf(&apos;.&apos;)+1,num);</span><br><span class="line"></span><br><span class="line">    var regx = value.match(/\d+\.\d+/g);</span><br><span class="line">    for ( var index in regx) &#123;</span><br><span class="line">        value = value.replace(regx[index],parseFloat(regx[index]));</span><br><span class="line">    &#125;</span><br><span class="line">    return value;</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">cutRoundNum(2.333000,4); // 2.333</span><br></pre></td></tr></table></figure><h3 id="27-JS判断是否是邮箱的正确格式"><a href="#27-JS判断是否是邮箱的正确格式" class="headerlink" title="27. JS判断是否是邮箱的正确格式"></a>27. JS判断是否是邮箱的正确格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 判断是否是邮箱的正确格式</span><br><span class="line"> * @param str 对应的需要验证的邮箱地址</span><br><span class="line"> * @returns &#123;boolean&#125; 返回真或假</span><br><span class="line"> */</span><br><span class="line">function isEmail(str) &#123;</span><br><span class="line">    var emailRegx = /^([a-z0-9A-Z]+[-|\.]?)+[a-z0-9A-Z]@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\.)+[a-zA-Z]&#123;2,&#125;$/;</span><br><span class="line">    return emailRegx.test(str);</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">isEmail(&quot;ye21st@gmail.com&quot;);// true</span><br><span class="line">isEmail(&quot;ye21st!gmail.com&quot;);// false</span><br></pre></td></tr></table></figure><h3 id="28-JS将手机号格式化，中间部分以-号代替"><a href="#28-JS将手机号格式化，中间部分以-号代替" class="headerlink" title="28. JS将手机号格式化，中间部分以 * 号代替"></a>28. JS将手机号格式化，中间部分以 * 号代替</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS将手机号格式化，中间部分以 * 号代替</span><br><span class="line"> * @param phone</span><br><span class="line"> * @returns &#123;string | * | void&#125;</span><br><span class="line"> */</span><br><span class="line">function phoneToStar( phone ) &#123;</span><br><span class="line">    return phone.replace(/(\d&#123;3&#125;)\d&#123;4&#125;(\d&#123;4&#125;)/, &quot;$1****$2&quot;);</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">phoneToStar(&quot;16666666666&quot;);  // 166****6666</span><br></pre></td></tr></table></figure><h3 id="29-JS银行卡卡号格式判断"><a href="#29-JS银行卡卡号格式判断" class="headerlink" title="29. JS银行卡卡号格式判断"></a>29. JS银行卡卡号格式判断</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS银行卡卡号格式判断</span><br><span class="line"> * @param bankno</span><br><span class="line"> * @returns &#123;boolean&#125;</span><br><span class="line"> */</span><br><span class="line">function bankCardCheck(bankno) &#123;</span><br><span class="line">    var lastNum=bankno.substr(bankno.length-1,1);//取出最后一位（与luhm进行比较）</span><br><span class="line"></span><br><span class="line">    var first15Num=bankno.substr(0,bankno.length-1);//前15或18位</span><br><span class="line">    var newArr=new Array();</span><br><span class="line">    for(var i=first15Num.length-1;i&gt;-1;i--)&#123;    //前15或18位倒序存进数组</span><br><span class="line">        newArr.push(first15Num.substr(i,1));</span><br><span class="line">    &#125;</span><br><span class="line">    var arrJiShu=new Array();  //奇数位*2的积 &lt;9</span><br><span class="line">    var arrJiShu2=new Array(); //奇数位*2的积 &gt;9</span><br><span class="line"></span><br><span class="line">    var arrOuShu=new Array();  //偶数位数组</span><br><span class="line">    for(var j=0;j&lt;newArr.length;j++)&#123;</span><br><span class="line">        if((j+1)%2==1)&#123;//奇数位</span><br><span class="line">            if(parseInt(newArr[j])*2&lt;9)</span><br><span class="line">                arrJiShu.push(parseInt(newArr[j])*2);</span><br><span class="line">            else</span><br><span class="line">                arrJiShu2.push(parseInt(newArr[j])*2);</span><br><span class="line">        &#125;</span><br><span class="line">        else //偶数位</span><br><span class="line">            arrOuShu.push(newArr[j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var jishu_child1=new Array();//奇数位*2 &gt;9 的分割之后的数组个位数</span><br><span class="line">    var jishu_child2=new Array();//奇数位*2 &gt;9 的分割之后的数组十位数</span><br><span class="line">    for(var h=0;h&lt;arrJiShu2.length;h++)&#123;</span><br><span class="line">        jishu_child1.push(parseInt(arrJiShu2[h])%10);</span><br><span class="line">        jishu_child2.push(parseInt(arrJiShu2[h])/10);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var sumJiShu=0; //奇数位*2 &lt; 9 的数组之和</span><br><span class="line">    var sumOuShu=0; //偶数位数组之和</span><br><span class="line">    var sumJiShuChild1=0; //奇数位*2 &gt;9 的分割之后的数组个位数之和</span><br><span class="line">    var sumJiShuChild2=0; //奇数位*2 &gt;9 的分割之后的数组十位数之和</span><br><span class="line">    var sumTotal=0;</span><br><span class="line">    for(var m=0;m&lt;arrJiShu.length;m++)&#123;</span><br><span class="line">        sumJiShu=sumJiShu+parseInt(arrJiShu[m]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(var n=0;n&lt;arrOuShu.length;n++)&#123;</span><br><span class="line">        sumOuShu=sumOuShu+parseInt(arrOuShu[n]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(var p=0;p&lt;jishu_child1.length;p++)&#123;</span><br><span class="line">        sumJiShuChild1=sumJiShuChild1+parseInt(jishu_child1[p]);</span><br><span class="line">        sumJiShuChild2=sumJiShuChild2+parseInt(jishu_child2[p]);</span><br><span class="line">    &#125;</span><br><span class="line">    //计算总和</span><br><span class="line">    sumTotal=parseInt(sumJiShu)+parseInt(sumOuShu)+parseInt(sumJiShuChild1)+parseInt(sumJiShuChild2);</span><br><span class="line"></span><br><span class="line">    //计算Luhm值</span><br><span class="line">    var k= parseInt(sumTotal)%10==0?10:parseInt(sumTotal)%10;</span><br><span class="line">    var luhm= 10-k;</span><br><span class="line"></span><br><span class="line">    if(lastNum==luhm &amp;&amp; lastNum.length != 0)&#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">bankCardCheck(&quot;6225365271562822&quot;);   // true</span><br><span class="line">bankCardCheck(&quot;622536527156283&quot;);    // false</span><br></pre></td></tr></table></figure><h3 id="30-JS检查用户名是否满足要求，只能是英文或英文数字"><a href="#30-JS检查用户名是否满足要求，只能是英文或英文数字" class="headerlink" title="30. JS检查用户名是否满足要求，只能是英文或英文数字"></a>30. JS检查用户名是否满足要求，只能是英文或英文数字</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS检查用户名是否满足要求，只能是英文或英文数字</span><br><span class="line"> * @returns &#123;*&#125;</span><br><span class="line"> */</span><br><span class="line">function checkLoginName(loginName) &#123;</span><br><span class="line">    return /^[A-Za-z0-9]*$/.test(loginName) &amp;&amp; !/(^\d*$)|(^\S+\s+\S+$)/.test(loginName);</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">checkLoginName(&quot;ye21st&quot;);    // true</span><br><span class="line">checkLoginName(&quot;sam!&quot;);  // false</span><br></pre></td></tr></table></figure><h3 id="31-JS验证密码，必须是字母和数字结合"><a href="#31-JS验证密码，必须是字母和数字结合" class="headerlink" title="31. JS验证密码，必须是字母和数字结合"></a>31. JS验证密码，必须是字母和数字结合</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS验证密码，必须是字母和数字结合</span><br><span class="line"> * @param password 密码</span><br><span class="line"> * @returns &#123;boolean&#125; 返回true或false</span><br><span class="line"> */</span><br><span class="line">function checkPasswordValidate(password) &#123;</span><br><span class="line">    return /^(?!^\d+$)(?!^[a-zA-Z]+$)[0-9a-zA-Z]&#123;6,20&#125;$/.test(password);</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">checkPasswordValidate(&quot;dasdas1132156&quot;);  // true</span><br><span class="line">checkPasswordValidate(&quot;dsadasdas&quot;);  // false</span><br></pre></td></tr></table></figure><h3 id="32-JS检查输入的邮政编码是否正确"><a href="#32-JS检查输入的邮政编码是否正确" class="headerlink" title="32. JS检查输入的邮政编码是否正确"></a>32. JS检查输入的邮政编码是否正确</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS检查输入的邮政编码是否正确</span><br><span class="line"> * @param str</span><br><span class="line"> * @returns &#123;Boolean&#125;</span><br><span class="line"> */</span><br><span class="line">function checkPostcode(str)&#123;</span><br><span class="line">    if (str.match(/^[1-9][0-9]&#123;5&#125;$/) == null) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">checkPostcode(&quot;423000&quot;); // true</span><br><span class="line">checkPostcode(&quot;029000&quot;); // false</span><br></pre></td></tr></table></figure><h3 id="33-JS验证是否为正整数"><a href="#33-JS验证是否为正整数" class="headerlink" title="33. JS验证是否为正整数"></a>33. JS验证是否为正整数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS验证是否为正整数</span><br><span class="line"> * @param str</span><br><span class="line"> * @returns</span><br><span class="line"> */</span><br><span class="line">function checkNumber(str)&#123;</span><br><span class="line">    return /^[1-9]\d*$/.test(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="34-JS判断浏览器"><a href="#34-JS判断浏览器" class="headerlink" title="34. JS判断浏览器"></a>34. JS判断浏览器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS判断浏览器</span><br><span class="line"> * @returns &#123;string&#125;</span><br><span class="line"> */</span><br><span class="line">function getOs() &#123;</span><br><span class="line">    if (navigator.userAgent.indexOf(&quot;MSIE 8.0&quot;) &gt; 0) &#123;</span><br><span class="line">        return &quot;MSIE8&quot;;</span><br><span class="line">    &#125; else if (navigator.userAgent.indexOf(&quot;MSIE 6.0&quot;) &gt; 0) &#123;</span><br><span class="line">        return &quot;MSIE6&quot;;</span><br><span class="line">    &#125; else if (navigator.userAgent.indexOf(&quot;MSIE 7.0&quot;) &gt; 0) &#123;</span><br><span class="line">        return &quot;MSIE7&quot;;</span><br><span class="line">    &#125; else if (isFirefox = navigator.userAgent.indexOf(&quot;Firefox&quot;) &gt; 0) &#123;</span><br><span class="line">        return &quot;Firefox&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    if (navigator.userAgent.indexOf(&quot;Chrome&quot;) &gt; 0) &#123;</span><br><span class="line">        return &quot;Chrome&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return &quot;Other&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">getOs(); // Chrome</span><br></pre></td></tr></table></figure><h3 id="35-JS判断浏览器"><a href="#35-JS判断浏览器" class="headerlink" title="35. JS判断浏览器"></a>35. JS判断浏览器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS手机类型判断</span><br><span class="line"> * @type &#123;&#123;userAgent: string, isAndroid: boolean, isIphone: boolean, isIpad: boolean, isWeixin: boolean, isChrome: boolean&#125;&#125;</span><br><span class="line"> */</span><br><span class="line">var BrowserInfo = &#123;</span><br><span class="line">    userAgent: navigator.userAgent.toLowerCase(),</span><br><span class="line">    isAndroid: Boolean(navigator.userAgent.match(/android/ig)),</span><br><span class="line">    isIphone: Boolean(navigator.userAgent.match(/iphone|ipod/ig)),</span><br><span class="line">    isIpad: Boolean(navigator.userAgent.match(/ipad/ig)),</span><br><span class="line">    isWeixin: Boolean(navigator.userAgent.match(/MicroMessenger/ig)),</span><br><span class="line">    isChrome:Boolean(navigator.userAgent.match(/chrome/ig)),</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">BrowserInfo; // android</span><br></pre></td></tr></table></figure><h3 id="36-JS判断是否支持css3"><a href="#36-JS判断是否支持css3" class="headerlink" title="36. JS判断是否支持css3"></a>36. JS判断是否支持css3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS判断是否支持css3</span><br><span class="line"> * @param &#123;string&#125; style CSS属性</span><br><span class="line"> * @returns</span><br><span class="line"> */</span><br><span class="line">function supportCss3(style) &#123;</span><br><span class="line">    var prefix = [&apos;webkit&apos;, &apos;Moz&apos;, &apos;ms&apos;, &apos;o&apos;],</span><br><span class="line">        i,</span><br><span class="line">        humpString = [],</span><br><span class="line">        htmlStyle = document.documentElement.style,</span><br><span class="line">        _toHumb = function (string) &#123;</span><br><span class="line">            return string.replace(/-(\w)/g, function ($0, $1) &#123;</span><br><span class="line">                return $1.toUpperCase();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">    for (i in prefix)</span><br><span class="line">        humpString.push(_toHumb(prefix[i] + &apos;-&apos; + style));</span><br><span class="line">    humpString.push(_toHumb(style));</span><br><span class="line">    for (i in humpString)</span><br><span class="line">        if (humpString[i] in htmlStyle) return true;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">supportCss3(&quot;transform&quot;);    // true</span><br></pre></td></tr></table></figure><h3 id="37-JS替换非法字符"><a href="#37-JS替换非法字符" class="headerlink" title="37. JS替换非法字符"></a>37. JS替换非法字符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS替换非法字符</span><br><span class="line"> * @param sStr</span><br><span class="line"> * @returns &#123;string&#125;</span><br><span class="line"> * @constructor</span><br><span class="line"> */</span><br><span class="line">function URLencode(sStr) &#123;</span><br><span class="line">    return escape(sStr).replace(/\+/g, &apos;%2B&apos;).replace(/\&quot;/g, &apos;%22&apos;).replace(/\&apos;/g, &apos;%27&apos;).replace(/\//g, &apos;%2F&apos;);</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">URLencode(&quot;=&quot;);  // %3D</span><br></pre></td></tr></table></figure><h3 id="38-JS获取当前时间"><a href="#38-JS获取当前时间" class="headerlink" title="38. JS获取当前时间"></a>38. JS获取当前时间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS获取当前时间</span><br><span class="line"> * @returns &#123;string&#125;</span><br><span class="line"> * @constructor</span><br><span class="line"> */</span><br><span class="line">function GetCurrentDate() &#123;</span><br><span class="line">    var d = new Date();</span><br><span class="line">    var y = d.getYear() + 1900;</span><br><span class="line">    month = add_zero(d.getMonth() + 1),</span><br><span class="line">        days = add_zero(d.getDate()),</span><br><span class="line">        hours = add_zero(d.getHours());</span><br><span class="line">    minutes = add_zero(d.getMinutes()),</span><br><span class="line">        seconds = add_zero(d.getSeconds());</span><br><span class="line">    var str = y + &apos;-&apos; + month + &apos;-&apos; + days + &apos; &apos; + hours + &apos;:&apos; + minutes + &apos;:&apos; + seconds;</span><br><span class="line">    function add_zero(temp) &#123;</span><br><span class="line">        if (temp &lt; 10)&#123;</span><br><span class="line">            return &quot;0&quot; + temp;</span><br><span class="line">        &#125;</span><br><span class="line">        return temp;</span><br><span class="line">    &#125;</span><br><span class="line">    return str;</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">GetCurrentDate();    // 2018-05-16 18:30:49</span><br></pre></td></tr></table></figure><h3 id="39-JS获取前num天的日期"><a href="#39-JS获取前num天的日期" class="headerlink" title="39. JS获取前num天的日期"></a>39. JS获取前num天的日期</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS获取前num天的日期</span><br><span class="line"> * @param &#123;Number&#125; num 自动向上取整</span><br><span class="line"> * @param &#123;boolean&#125; order true是日期从大到小，false是从小到大</span><br><span class="line"> * @returns MM-dd</span><br><span class="line"> */</span><br><span class="line">function getTodayDate(num, order = false) &#123;</span><br><span class="line">    num = Math.ceil(num)</span><br><span class="line">    let arr_Date = []</span><br><span class="line">    for (var i = 0; i &lt; num; i++) &#123;</span><br><span class="line">        let date = new Date(new Date().getTime() - (i * 24 * 60 * 60 * 1000))</span><br><span class="line">        let currMonth = new Date(date).getMonth() + 1</span><br><span class="line">        let currDay = new Date(date).getDate()</span><br><span class="line">        let result = `$&#123;currMonth.toString().length &lt; 2 ? `0$&#123;currMonth&#125;` : currMonth&#125;-$&#123;currDay.toString().length &lt; 2 ? `0$&#123;currDay&#125;` : currDay&#125;`;</span><br><span class="line">        if (order) &#123;</span><br><span class="line">            arr_Date.push(result);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            arr_Date.unshift(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr_Date;</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">getTodayDate(7); // [&quot;05-10&quot;, &quot;05-11&quot;, &quot;05-12&quot;, &quot;05-13&quot;, &quot;05-14&quot;, &quot;05-15&quot;, &quot;05-16&quot;]</span><br></pre></td></tr></table></figure><h3 id="40-JS-XSS字符转义"><a href="#40-JS-XSS字符转义" class="headerlink" title="40. JS XSS字符转义"></a>40. JS XSS字符转义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS XSS字符转义</span><br><span class="line"> * @param markup</span><br><span class="line"> * @returns &#123;string&#125;</span><br><span class="line"> */</span><br><span class="line">function replaceXSS(markup) &#123;</span><br><span class="line">    var _ENCODE_HTML_RULES = &#123;</span><br><span class="line">        &quot;&amp;&quot;: &quot;&amp;amp;&quot;,</span><br><span class="line">        &quot;&lt;&quot;: &quot;&amp;lt;&quot;,</span><br><span class="line">        &quot;&gt;&quot;: &quot;&amp;gt;&quot;,</span><br><span class="line">        &apos;&quot;&apos;: &quot;&amp;#34;&quot;,</span><br><span class="line">        &quot;&apos;&quot;: &quot;&amp;#39;&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">    var _MATCH_HTML = /[&amp;&lt;&gt;&apos;&quot;]/g;</span><br><span class="line"></span><br><span class="line">    function encode_char(c) &#123;</span><br><span class="line">        return _ENCODE_HTML_RULES[c] || c;</span><br><span class="line">    &#125;;</span><br><span class="line">    return markup === undefined ? &apos;&apos; : String(markup).replace(_MATCH_HTML, encode_char);</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">replaceXSS(&quot;&lt;&gt;&quot;);    //  &amp;lt;&amp;gt;</span><br></pre></td></tr></table></figure><h3 id="41-JS-将object转为form-data，方便post提交"><a href="#41-JS-将object转为form-data，方便post提交" class="headerlink" title="41. JS 将object转为form data，方便post提交"></a>41. JS 将object转为form data，方便post提交</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS 将object转为form data，方便post提交</span><br><span class="line"> * @param &#123;Object&#125; obj [数据对象]</span><br><span class="line"> * @return &#123;String&#125;</span><br><span class="line"> */</span><br><span class="line">function encodeFormData(obj) &#123;</span><br><span class="line">    if (!obj) return;</span><br><span class="line">    var pairs = [];</span><br><span class="line">    for (var name in obj) &#123;</span><br><span class="line">        if (!obj.hasOwnProperty(name)) continue;</span><br><span class="line">        if (typeof obj[name] == &apos;function&apos;) continue;</span><br><span class="line">        var value = obj[name].toString();</span><br><span class="line">        name = encodeURIComponent(name.replace(&apos;%20&apos;, &apos;+&apos;));</span><br><span class="line">        value = encodeURIComponent(value.replace(&apos;%20&apos;, &apos;+&apos;));</span><br><span class="line">        pairs.push(name + &apos;=&apos; + value);</span><br><span class="line">    &#125;</span><br><span class="line">    return pairs.join(&apos;&amp;&apos;);</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">encodeFormData(&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;ye21st&quot;&#125;);    // id=1&amp;name=ye21st</span><br></pre></td></tr></table></figure><h3 id="42-JS将驼峰字符串转为下划线字符串"><a href="#42-JS将驼峰字符串转为下划线字符串" class="headerlink" title="42. JS将驼峰字符串转为下划线字符串"></a>42. JS将驼峰字符串转为下划线字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS将驼峰字符串转为下划线字符串</span><br><span class="line"> * @param str</span><br><span class="line"> * @returns &#123;*&#125;</span><br><span class="line"> */</span><br><span class="line">function convertCamelCase(str) &#123;</span><br><span class="line">    if (typeof (str) != &apos;string&apos;) &#123;</span><br><span class="line">        console.error(&apos;[convertCamelCase] argument is not String.&apos;);</span><br><span class="line">        return str;</span><br><span class="line">    &#125;</span><br><span class="line">    var pattern = /[A-Z]/g;</span><br><span class="line">    return str.replace(pattern, function(match, index) &#123;</span><br><span class="line">        if (index != 0) &#123;</span><br><span class="line">            return &apos;_&apos; + match.toLowerCase();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return match.toLowerCase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">convertCamelCase(&quot;HelloWolrd&quot;);  // hello_wolrd</span><br><span class="line">convertCamelCase(1);    // [convertCamelCase] argument is not String. 1</span><br></pre></td></tr></table></figure><h3 id="43-JS检测是否支持transition"><a href="#43-JS检测是否支持transition" class="headerlink" title="43. JS检测是否支持transition"></a>43. JS检测是否支持transition</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS检测是否支持transition</span><br><span class="line"> * @returns &#123;boolean&#125;</span><br><span class="line"> */</span><br><span class="line">function supportTransition () &#123;</span><br><span class="line">    var s = document.createElement(&apos;p&apos;).style,</span><br><span class="line">        r = &apos;transition&apos; in s ||</span><br><span class="line">            &apos;WebkitTransition&apos; in s ||</span><br><span class="line">            &apos;MozTransition&apos; in s ||</span><br><span class="line">            &apos;msTransition&apos; in s ||</span><br><span class="line">            &apos;OTransition&apos; in s;</span><br><span class="line">    s = null;</span><br><span class="line">    return r;</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">supportTransition(); // true</span><br></pre></td></tr></table></figure><h3 id="44-JS数据求交集"><a href="#44-JS数据求交集" class="headerlink" title="44. JS数据求交集"></a>44. JS数据求交集</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS数据求交集</span><br><span class="line"> * @param array1</span><br><span class="line"> * @param array2</span><br><span class="line"> * @returns &#123;*&#125;</span><br><span class="line"> */</span><br><span class="line">function intersection(array1, array2) &#123;</span><br><span class="line">    return array1.filter(function(n) &#123;</span><br><span class="line">        return array2.indexOf(n) != -1;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">var arr1 = [1,2,3,4,5];</span><br><span class="line">var arr2 = [3,4,5,6,7];</span><br><span class="line">intersection(arr1,arr2); // [3,4,5]</span><br></pre></td></tr></table></figure><h3 id="45-JS-Base64字符串编码与解码"><a href="#45-JS-Base64字符串编码与解码" class="headerlink" title="45. JS Base64字符串编码与解码"></a>45. JS Base64字符串编码与解码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * BASE64加密</span><br><span class="line"> * @param str</span><br><span class="line"> * @returns &#123;string&#125;</span><br><span class="line"> */</span><br><span class="line">function base64Encode(str) &#123;</span><br><span class="line">    return btoa(unescape(encodeURIComponent(str)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * BASE64解密</span><br><span class="line"> * @param str</span><br><span class="line"> * @returns &#123;string&#125;</span><br><span class="line"> */</span><br><span class="line">function base64Decode(str) &#123;</span><br><span class="line">    return decodeURIComponent(escape(atob(str)));</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">base64Encode(&quot;test&quot;);    // dGVzdA==</span><br><span class="line">base64Decode(test);     // test</span><br></pre></td></tr></table></figure><h3 id="46-JS判断两个数组是否相等"><a href="#46-JS判断两个数组是否相等" class="headerlink" title="46. JS判断两个数组是否相等"></a>46. JS判断两个数组是否相等</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS判断两个数组是否相等</span><br><span class="line"> * @param &#123;Array&#125; arr1</span><br><span class="line"> * @param &#123;Array&#125; arr2</span><br><span class="line"> * @return &#123;Boolean&#125;</span><br><span class="line"> */</span><br><span class="line">function arrayEqual(arr1, arr2) &#123;</span><br><span class="line">    if (arr1 === arr2) return true;</span><br><span class="line">    if (arr1.length != arr2.length) return false;</span><br><span class="line">    for (var i = 0; i &lt; arr1.length; ++i) &#123;</span><br><span class="line">        if (arr1[i] !== arr2[i]) return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">var arr1 = [1,2,3,4,5];</span><br><span class="line">var arr2 = [3,4,5,6,7];</span><br><span class="line">var arr3 = [3,4,5,6,7];</span><br><span class="line">var arr4 = [3,4,5,6,7];</span><br><span class="line">arrayEqual(arr1,arr2);   // false</span><br><span class="line">arrayEqual(arr3,arr4);   // true</span><br></pre></td></tr></table></figure><h3 id="47-JS格式化-startTime-距现在的已过时间"><a href="#47-JS格式化-startTime-距现在的已过时间" class="headerlink" title="47. JS格式化${startTime}距现在的已过时间"></a>47. JS格式化${startTime}距现在的已过时间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS格式化$&#123;startTime&#125;距现在的已过时间</span><br><span class="line"> * @param  &#123;Date&#125; startTime</span><br><span class="line"> * @return &#123;String&#125;</span><br><span class="line"> */</span><br><span class="line">function formatPassTime(startTime) &#123;</span><br><span class="line">    var currentTime = Date.parse(new Date()),</span><br><span class="line">        time = currentTime - new Date(startTime),</span><br><span class="line">        day = parseInt(time / (1000 * 60 * 60 * 24)),</span><br><span class="line">        hour = parseInt(time / (1000 * 60 * 60)),</span><br><span class="line">        min = parseInt(time / (1000 * 60)),</span><br><span class="line">        month = parseInt(day / 30),</span><br><span class="line">        year = parseInt(month / 12);</span><br><span class="line">    if (year) return year + &quot;年前&quot;;</span><br><span class="line">    if (month) return month + &quot;个月前&quot;;</span><br><span class="line">    if (day) return day + &quot;天前&quot;;</span><br><span class="line">    if (hour) return hour + &quot;小时前&quot;;</span><br><span class="line">    if (min) return min + &quot;分钟前&quot;;</span><br><span class="line">    else return &apos;刚刚&apos;;</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">formatPassTime(&quot;2018-5-17 10:19:00&quot;);    // 1小时前</span><br></pre></td></tr></table></figure><h3 id="48-JS格式化现在距-endTime-的剩余时间"><a href="#48-JS格式化现在距-endTime-的剩余时间" class="headerlink" title="48. JS格式化现在距${endTime}的剩余时间"></a>48. JS格式化现在距${endTime}的剩余时间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS格式化现在距$&#123;endTime&#125;的剩余时间</span><br><span class="line"> * @param  &#123;Date&#125; endTime</span><br><span class="line"> * @return &#123;String&#125;</span><br><span class="line"> */</span><br><span class="line">function formatRemainTime(endTime) &#123;</span><br><span class="line">    var startDate = new Date(); //开始时间</span><br><span class="line">    var endDate = new Date(endTime); //结束时间</span><br><span class="line">    var t = endDate.getTime() - startDate.getTime(); //时间差</span><br><span class="line">    var d = 0,</span><br><span class="line">        h = 0,</span><br><span class="line">        m = 0,</span><br><span class="line">        s = 0;</span><br><span class="line">    if (t &gt;= 0) &#123;</span><br><span class="line">        d = Math.floor(t / 1000 / 3600 / 24);</span><br><span class="line">        h = Math.floor(t / 1000 / 60 / 60 % 24);</span><br><span class="line">        m = Math.floor(t / 1000 / 60 % 60);</span><br><span class="line">        s = Math.floor(t / 1000 % 60);</span><br><span class="line">    &#125;</span><br><span class="line">    return d + &quot;天 &quot; + h + &quot;小时 &quot; + m + &quot;分钟 &quot; + s + &quot;秒&quot;;</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">formatRemainTime(&quot;2018-5-27 00:00:00&quot;);  // 9天 12小时 2分钟 8秒</span><br></pre></td></tr></table></figure><h3 id="49-JS-Url参数转对象"><a href="#49-JS-Url参数转对象" class="headerlink" title="49. JS Url参数转对象"></a>49. JS Url参数转对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS Url参数转对象</span><br><span class="line"> * @param  &#123;String&#125; url  default: window.location.href</span><br><span class="line"> * @return &#123;Object&#125;</span><br><span class="line"> */</span><br><span class="line">function parseQueryString(url) &#123;</span><br><span class="line">    url = url == null ? window.location.href : url</span><br><span class="line">    var search = url.substring(url.lastIndexOf(&apos;?&apos;) + 1)</span><br><span class="line">    if (!search) &#123;</span><br><span class="line">        return &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return JSON.parse(&apos;&#123;&quot;&apos; + decodeURIComponent(search).replace(/&quot;/g, &apos;\\&quot;&apos;).replace(/&amp;/g, &apos;&quot;,&quot;&apos;).replace(/=/g, &apos;&quot;:&quot;&apos;) + &apos;&quot;&#125;&apos;)</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">parseQueryString(&quot;http://www.baidu.com?id=1&amp;name=ye21st&quot;);   // &#123;id: &quot;1&quot;, name: &quot;ye21st&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="50-JS过滤字符串中所有空格"><a href="#50-JS过滤字符串中所有空格" class="headerlink" title="50. JS过滤字符串中所有空格"></a>50. JS过滤字符串中所有空格</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS过滤字符串中所有空格</span><br><span class="line"> * @param string</span><br><span class="line"> * @returns &#123;string&#125;</span><br><span class="line"> */</span><br><span class="line">function ignoreSpaces(string) &#123;</span><br><span class="line">    var temp = &quot;&quot;;</span><br><span class="line">    string = &apos;&apos; + string;</span><br><span class="line">    splitstring = string.split(&quot; &quot;);</span><br><span class="line">    for(i = 0; i &lt; splitstring.length; i++)</span><br><span class="line">        temp += splitstring[i];</span><br><span class="line">    return temp;</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">ignoreSpaces(&quot; a b   c d e &quot;);   // abcde</span><br></pre></td></tr></table></figure><h3 id="51-JS在字符串中查找某一字符串出现的次数"><a href="#51-JS在字符串中查找某一字符串出现的次数" class="headerlink" title="51. JS在字符串中查找某一字符串出现的次数"></a>51. JS在字符串中查找某一字符串出现的次数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS在字符串中查找某一字符串出现的次数</span><br><span class="line"> * @param str</span><br><span class="line"> * @param strSplit</span><br><span class="line"> * @returns &#123;number&#125;</span><br><span class="line"> */</span><br><span class="line">function countStr (str,strSplit)&#123;</span><br><span class="line">    return str.split(strSplit).length-1</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">var strTest=&apos;sad44654blog5a1sd67as9dablog4s5d16zxc4sdweasjkblogwqepaskdkblogahseiuadbhjcibloguyeajzxkcabloguyiwezxc967&apos;</span><br><span class="line">countStr(strTest,&quot;blog&quot;);    // 6</span><br></pre></td></tr></table></figure><h3 id="52-JS从数组中随机获取元素"><a href="#52-JS从数组中随机获取元素" class="headerlink" title="52. JS从数组中随机获取元素"></a>52. JS从数组中随机获取元素</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS从数组中随机获取元素</span><br><span class="line"> * @param arr</span><br><span class="line"> * @returns &#123;*&#125;</span><br><span class="line"> */</span><br><span class="line">function randomOne(arr) &#123;</span><br><span class="line">    return arr[Math.floor(Math.random() * arr.length)];</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">var arr = [1,2,3,4,5,6,7,8,9,0];</span><br><span class="line">randomOne(arr);  //  9</span><br></pre></td></tr></table></figure><h3 id="53-JS适配rem"><a href="#53-JS适配rem" class="headerlink" title="53. JS适配rem"></a>53. JS适配rem</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS适配rem</span><br><span class="line"> */</span><br><span class="line">function getFontSize()&#123;</span><br><span class="line">    var doc=document,win=window;</span><br><span class="line">    var docEl = doc.documentElement,</span><br><span class="line">        resizeEvt = &apos;orientationchange&apos; in window ? &apos;orientationchange&apos; : &apos;resize&apos;,</span><br><span class="line">        recalc = function () &#123;</span><br><span class="line">            var clientWidth = docEl.clientWidth;</span><br><span class="line">            if (!clientWidth) return;</span><br><span class="line">            //如果屏幕大于750（750是根据我效果图设置的，具体数值参考效果图），就设置clientWidth=750，防止font-size会超过100px</span><br><span class="line">            if(clientWidth&gt;750)&#123;clientWidth=750&#125;</span><br><span class="line">            //设置根元素font-size大小</span><br><span class="line">            docEl.style.fontSize = 100 * (clientWidth / 750) + &apos;px&apos;;</span><br><span class="line">        &#125;;</span><br><span class="line">    //屏幕大小改变，或者横竖屏切换时，触发函数</span><br><span class="line">    win.addEventListener(resizeEvt, recalc, false);</span><br><span class="line">    //文档加载完成时，触发函数</span><br><span class="line">    doc.addEventListener(&apos;DOMContentLoaded&apos;, recalc, false);</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">getFontSize();</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    /*使用方式很简单，比如效果图上，有张图片。宽高都是100px;*/</span><br><span class="line">    /*样式写法就是*/</span><br><span class="line">      img&#123;</span><br><span class="line">          width:1rem;</span><br><span class="line">          height:1rem;</span><br><span class="line">      &#125;</span><br><span class="line">    /*这样的设置，比如在屏幕宽度大于等于750px设备上，1rem=100px；图片显示就是宽高都是100px*/</span><br><span class="line">    /*比如在iphone6(屏幕宽度：375)上，375/750*100=50px;就是1rem=50px;图片显示就是宽高都是50px;*/</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="54-JS忽略大小写判断字符串是否相同"><a href="#54-JS忽略大小写判断字符串是否相同" class="headerlink" title="54. JS忽略大小写判断字符串是否相同"></a>54. JS忽略大小写判断字符串是否相同</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS忽略大小写判断字符串是否相同</span><br><span class="line"> * @param str1</span><br><span class="line"> * @param str2</span><br><span class="line"> * @returns &#123;boolean&#125;</span><br><span class="line"> */</span><br><span class="line">function isEqualsIgnorecase(str1,str2) &#123;</span><br><span class="line">    if(str1.toUpperCase() == str2.toUpperCase())&#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">isEqualsIgnorecase(&quot;abc&quot;,&quot;ABC&quot;); // true</span><br></pre></td></tr></table></figure><h3 id="55-JS忽略大小写判断字符串是否相同"><a href="#55-JS忽略大小写判断字符串是否相同" class="headerlink" title="55. JS忽略大小写判断字符串是否相同"></a>55. JS忽略大小写判断字符串是否相同</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS忽略大小写判断字符串是否相同</span><br><span class="line"> * @param str1</span><br><span class="line"> * @param str2</span><br><span class="line"> * @returns &#123;boolean&#125;</span><br><span class="line"> */</span><br><span class="line">function isEqualsIgnorecase(str1,str2) &#123;</span><br><span class="line">    if(str1.toUpperCase() == str2.toUpperCase())&#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">isEqualsIgnorecase(&quot;abc&quot;,&quot;ABC&quot;); // true</span><br></pre></td></tr></table></figure><h3 id="56-JS忽略大小写判断字符串是否相同"><a href="#56-JS忽略大小写判断字符串是否相同" class="headerlink" title="56. JS忽略大小写判断字符串是否相同"></a>56. JS忽略大小写判断字符串是否相同</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS忽略大小写判断字符串是否相同</span><br><span class="line"> * @param str1</span><br><span class="line"> * @param str2</span><br><span class="line"> * @returns &#123;boolean&#125;</span><br><span class="line"> */</span><br><span class="line">function isEqualsIgnorecase(str1,str2) &#123;</span><br><span class="line">    if(str1.toUpperCase() == str2.toUpperCase())&#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">isEqualsIgnorecase(&quot;abc&quot;,&quot;ABC&quot;); // true</span><br></pre></td></tr></table></figure><h3 id="57-JS根据文件名获取文件格式"><a href="#57-JS根据文件名获取文件格式" class="headerlink" title="57. JS根据文件名获取文件格式"></a>57. JS根据文件名获取文件格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS根据文件名获取文件格式</span><br><span class="line"> * @param str</span><br><span class="line"> * @returns &#123;string&#125;</span><br><span class="line"> */</span><br><span class="line">function getFileTypeByFileName(str)&#123;</span><br><span class="line">    return str.substr(str.lastIndexOf(&quot;.&quot;)+1).toLowerCase();</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">getFileTypeByFileName(&quot;index.html&quot;); // html</span><br><span class="line">getFileTypeByFileName(&quot;index.js&quot;);  // js</span><br><span class="line">getFileTypeByFileName(&quot;index.php&quot;); // php</span><br></pre></td></tr></table></figure><h3 id="58-JS校验Ip地址格式"><a href="#58-JS校验Ip地址格式" class="headerlink" title="58. JS校验Ip地址格式"></a>58. JS校验Ip地址格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS校验Ip地址格式</span><br><span class="line"> * @param ipvale</span><br><span class="line"> * @returns &#123;boolean&#125;</span><br><span class="line"> */</span><br><span class="line">function checkIp(ipvale) &#123;</span><br><span class="line">    var regex = /^([1-9]|[1-9]\d|1\d&#123;2&#125;|2[0-1]\d|22[0-3])(\.(\d|[1-9]\d|1\d&#123;2&#125;|2[0-4]\d|25[0-5]))&#123;3&#125;$/;</span><br><span class="line">    var b = regex.test(ipvale);</span><br><span class="line">    return b;</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">checkIp(&quot;127.0.0.1&quot;);    // true</span><br><span class="line">checkIp(&quot;0.0.0.1&quot;);      // false</span><br></pre></td></tr></table></figure><h3 id="59-JS生成指定位数的随机整数（可以用于短信验证码的生成）"><a href="#59-JS生成指定位数的随机整数（可以用于短信验证码的生成）" class="headerlink" title="59. JS生成指定位数的随机整数（可以用于短信验证码的生成）"></a>59. JS生成指定位数的随机整数（可以用于短信验证码的生成）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS生成指定位数的随机整数</span><br><span class="line"> * @param count</span><br><span class="line"> * @returns &#123;string&#125;</span><br><span class="line"> */</span><br><span class="line">function getRandomNum(count)&#123;</span><br><span class="line">    var arr = new Array;</span><br><span class="line">    var reNum = &quot;&quot;;</span><br><span class="line">    for(var i=0;i&lt;count;i++)&#123;</span><br><span class="line">        arr[i] = parseInt(Math.random()*10);</span><br><span class="line">        reNum += String(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return reNum;</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">getRandomNum(6); // 292868</span><br></pre></td></tr></table></figure><h3 id="60-JS判断包含关系"><a href="#60-JS判断包含关系" class="headerlink" title="60. JS判断包含关系"></a>60. JS判断包含关系</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS判断包含关系</span><br><span class="line"> * @param string 原始字符串</span><br><span class="line"> * @param substr 子字符串</span><br><span class="line"> * @param isIgnoreCase 忽略大小写</span><br><span class="line"> * @returns &#123;boolean&#125;</span><br><span class="line"> */</span><br><span class="line">function jsContains(string,substr,isIgnoreCase)</span><br><span class="line">&#123;</span><br><span class="line">    if(isIgnoreCase)</span><br><span class="line">    &#123;</span><br><span class="line">        string=string.toLowerCase();</span><br><span class="line">        substr=substr.toLowerCase();</span><br><span class="line">    &#125;</span><br><span class="line">    var startChar=substr.substring(0,1);</span><br><span class="line">    var strLen=substr.length;</span><br><span class="line">    for(var j=0;j&lt;string.length-strLen+1;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(string.charAt(j)==startChar)//如果匹配起始字符,开始查找</span><br><span class="line">        &#123;</span><br><span class="line">            if(string.substring(j,j+strLen)==substr)//如果从j开始的字符与str匹配，那ok</span><br><span class="line">            &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">jsContains(&quot;Hello World!&quot;,&quot;world&quot;);          // false</span><br><span class="line">jsContains(&quot;Hello World!&quot;,&quot;world&quot;,true);     // true</span><br></pre></td></tr></table></figure><h3 id="61-JS时间戳转成时间"><a href="#61-JS时间戳转成时间" class="headerlink" title="61. JS时间戳转成时间"></a>61. JS时间戳转成时间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS时间戳转成时间</span><br><span class="line"> * @param time</span><br><span class="line"> * @returns</span><br><span class="line"> */</span><br><span class="line">function timeStamp2String(time)&#123;</span><br><span class="line">    var datetime = new Date();</span><br><span class="line">    datetime.setTime(time);</span><br><span class="line">    var year = datetime.getFullYear();</span><br><span class="line">    var month = datetime.getMonth() + 1 &lt; 10 ? &quot;0&quot; + (datetime.getMonth() + 1) : datetime.getMonth() + 1;</span><br><span class="line">    var date = datetime.getDate() &lt; 10 ? &quot;0&quot; + datetime.getDate() : datetime.getDate();</span><br><span class="line">    var hour = datetime.getHours()&lt; 10 ? &quot;0&quot; + datetime.getHours() : datetime.getHours();</span><br><span class="line">    var minute = datetime.getMinutes()&lt; 10 ? &quot;0&quot; + datetime.getMinutes() : datetime.getMinutes();</span><br><span class="line">    var second = datetime.getSeconds()&lt; 10 ? &quot;0&quot; + datetime.getSeconds() : datetime.getSeconds();</span><br><span class="line">    return year + &quot;-&quot; + month + &quot;-&quot; + date+&quot; &quot;+hour+&quot;:&quot;+minute+&quot;:&quot;+second;</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">timeStamp2String(1526552438244); // 2018-05-17 18:20:38</span><br></pre></td></tr></table></figure><h3 id="62-JS判断是否为空"><a href="#62-JS判断是否为空" class="headerlink" title="62. JS判断是否为空"></a>62. JS判断是否为空</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * JS判断是否为空</span><br><span class="line"> * @param val</span><br><span class="line"> * @returns &#123;boolean&#125;</span><br><span class="line"> */</span><br><span class="line">function isNull(val) &#123;</span><br><span class="line">    if (val == undefined || val == null || val == &quot;&quot; || val == &apos;&apos;</span><br><span class="line">        || val == &quot;undefined&quot; || val == &quot;null&quot; || val == &quot;NULL&quot;) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">调用方法：</span><br><span class="line">isNull(undefined);   // true</span><br><span class="line">isNull(null);   // true</span><br><span class="line">isNull(&quot;&quot;); // true</span><br><span class="line">isNull(&apos;&apos;); // true</span><br><span class="line">isNull(&quot;undefined&quot;);    // true</span><br><span class="line">isNull(&quot;null&quot;); // true</span><br><span class="line">isNull(&quot;NULL&quot;);    // true</span><br></pre></td></tr></table></figure><h3 id="内容持续更新中-敬请期待…"><a href="#内容持续更新中-敬请期待…" class="headerlink" title="==内容持续更新中,敬请期待…=="></a>==内容持续更新中,敬请期待…==</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-push-与unshift-方法&quot;&gt;&lt;a href=&quot;#1-push-与unshift-方法&quot; class=&quot;headerlink&quot; title=&quot;1. push()与unshift()方法&quot;&gt;&lt;/a&gt;1. push()与unshift()方法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;把一个或多个元素添加到数组的尾部，请使用 push() 方法&lt;br&gt;   往数组头部添加元素，用unshift（）方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;2-split-‘-’-1&quot;&gt;&lt;a href=&quot;#2-split-‘-’-1&quot; class=&quot;headerlink&quot; title=&quot;2. split(‘.’)[1]&quot;&gt;&lt;/a&gt;2. split(‘.’)[1]&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;这里split(‘.’)[1] 是一种缩写形式，把它拆开来看实际就是&lt;br&gt;先用split(‘.’)方法将字符串以”.”开割形成一个字符串数组，然后再通过索引[1]取出所得数组中的第二个元素的值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;3-findIndex&quot;&gt;&lt;a href=&quot;#3-findIndex&quot; class=&quot;headerlink&quot; title=&quot;3. findIndex()&quot;&gt;&lt;/a&gt;3. findIndex()&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;findIndex() 方法返回传入一个测试条件（函数）符合条件的数组第一个元素位置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;4-substr&quot;&gt;&lt;a href=&quot;#4-substr&quot; class=&quot;headerlink&quot; title=&quot;4. substr()&quot;&gt;&lt;/a&gt;4. substr()&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;substr() 方法可在字符串中抽取从 start 下标开始的指定数目的字符。&lt;br&gt;在本例中，我们将使用 substr() 从字符串中提取一些字符：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var str=&amp;quot;Hello world!&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;document.write(str.substr(3,7))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lo worl&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
</feed>
